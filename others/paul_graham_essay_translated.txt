Những Gì Tôi Đã Làm

Tháng Hai năm 2021

Trước khi vào đại học, hai thứ chính tôi làm ngoài việc học là viết và lập trình. Tôi không viết bài luận. Tôi viết những gì mà những người mới bắt đầu viết nên viết vào thời điểm đó, và có lẽ vẫn còn viết: truyện ngắn. Truyện của tôi rất tệ. Chúng hầu như không có cốt truyện, chỉ có những nhân vật với cảm xúc mạnh mẽ, mà tôi tưởng tượng rằng làm chúng trở nên sâu sắc.

Những chương trình đầu tiên tôi thử viết là trên IBM 1401 mà quận trường của chúng tôi sử dụng cho cái mà lúc đó gọi là "xử lý dữ liệu." Điều này xảy ra vào năm lớp 9, nên tôi khoảng 13 hoặc 14 tuổi. IBM 1401 của quận trường tình cờ nằm ở tầng hầm của trường trung học cơ sở của chúng tôi, và bạn tôi Rich Draves và tôi đã xin phép để sử dụng nó. Đó giống như một cái hang nhỏ của ác nhân trong phim Bond, với tất cả những cỗ máy trông như người ngoài hành tinh — CPU, ổ đĩa, máy in, máy đọc thẻ — đứng trên sàn nâng dưới ánh sáng huỳnh quang rực rỡ.

Ngôn ngữ mà chúng tôi sử dụng là một phiên bản sớm của Fortran. Bạn phải gõ các chương trình trên các thẻ đục lỗ, sau đó xếp chúng vào máy đọc thẻ và nhấn nút để tải chương trình vào bộ nhớ và chạy nó. Kết quả thông thường sẽ là in một cái gì đó trên máy in cực kỳ ồn ào.

Tôi rất bối rối về IBM 1401. Tôi không thể tìm ra cách sử dụng nó. Và nhìn lại thì không có nhiều thứ tôi có thể làm với nó. Hình thức đầu vào duy nhất cho các chương trình là dữ liệu được lưu trữ trên các thẻ đục lỗ, và tôi không có dữ liệu nào được lưu trữ trên thẻ đục lỗ. Lựa chọn duy nhất khác là làm những việc không cần đầu vào nào, như tính toán xấp xỉ số pi, nhưng tôi không biết đủ toán học để làm bất cứ điều gì thú vị về mặt đó. Vì vậy, tôi không ngạc nhiên khi không thể nhớ bất kỳ chương trình nào mà tôi đã viết, vì chúng chắc chắn không làm được nhiều. Kỷ niệm rõ ràng nhất của tôi là khoảnh khắc tôi học được rằng các chương trình có thể không kết thúc, khi một trong số chúng của tôi không kết thúc. Trên một máy không có chia sẻ thời gian, đây là một lỗi xã hội cũng như kỹ thuật, như biểu hiện của người quản lý trung tâm dữ liệu đã làm rõ.

Với các máy tính cá nhân, mọi thứ đã thay đổi. Bây giờ bạn có thể có một chiếc máy tính ngay trước mặt bạn, trên bàn, có thể phản hồi lại các phím bấm của bạn trong khi nó đang chạy thay vì chỉ xử lý một đống thẻ đục lỗ và sau đó dừng lại.

Người bạn đầu tiên của tôi sở hữu một máy tính cá nhân đã tự mình lắp ráp nó. Nó được bán dưới dạng bộ kit bởi Heathkit. Tôi nhớ rõ cảm giác ấn tượng và ghen tị khi nhìn anh ấy ngồi trước máy tính, gõ các chương trình trực tiếp vào máy.

Máy tính lúc đó rất đắt đỏ và phải mất nhiều năm thuyết phục tôi mới khiến cha tôi mua một chiếc, một TRS-80, khoảng năm 1980. Tiêu chuẩn vàng lúc đó là Apple II, nhưng TRS-80 cũng đủ tốt. Đây là lúc tôi thực sự bắt đầu lập trình. Tôi đã viết những trò chơi đơn giản, một chương trình để dự đoán độ cao mà tên lửa mô hình của tôi sẽ bay, và một trình xử lý văn bản mà cha tôi đã sử dụng để viết ít nhất một cuốn sách. Bộ nhớ chỉ đủ cho khoảng 2 trang văn bản, vì vậy ông ấy viết từng 2 trang một rồi in chúng ra, nhưng nó vẫn tốt hơn nhiều so với máy đánh chữ.

Mặc dù tôi thích lập trình, tôi không dự định học nó ở đại học. Ở đại học tôi dự định học triết học, nghe có vẻ mạnh mẽ hơn nhiều. Nó dường như, đối với tôi lúc còn ngây thơ ở trung học, là việc nghiên cứu các chân lý tối thượng, so với những thứ được nghiên cứu trong các lĩnh vực khác chỉ là kiến thức lĩnh vực. Những gì tôi phát hiện ra khi vào đại học là các lĩnh vực khác chiếm nhiều không gian ý tưởng đến mức không còn nhiều cho những chân lý tối thượng này. Tất cả những gì dường như còn lại cho triết học là các trường hợp ngoại lệ mà người trong các lĩnh vực khác cảm thấy có thể bỏ qua một cách an toàn.

Lúc đó tôi không thể diễn đạt điều này bằng lời khi tôi 18 tuổi. Tất cả những gì tôi biết là tôi cứ tiếp tục học các khóa học triết học và chúng cứ tiếp tục buồn chán. Vì vậy, tôi quyết định chuyển sang AI.

AI đang trở nên phổ biến vào giữa những năm 1980, nhưng có hai điều đặc biệt khiến tôi muốn làm về nó: một cuốn tiểu thuyết của Heinlein gọi là The Moon is a Harsh Mistress, có một máy tính thông minh tên là Mike, và một bộ phim tài liệu của PBS cho thấy Terry Winograd sử dụng SHRDLU. Tôi chưa thử đọc lại The Moon is a Harsh Mistress, nên tôi không biết nó có còn hấp dẫn không, nhưng khi tôi đọc nó tôi đã bị cuốn vào thế giới của nó. Dường như chỉ là vấn đề thời gian trước khi chúng ta có Mike, và khi tôi thấy Winograd sử dụng SHRDLU, dường như thời gian đó chỉ còn vài năm nữa. Tất cả những gì bạn cần làm là dạy SHRDLU nhiều từ hơn.

Không có lớp học nào về AI ở Cornell lúc đó, thậm chí cả các lớp học cao học, nên tôi bắt đầu tự học. Điều này có nghĩa là học Lisp, vì vào những ngày đó Lisp được coi là ngôn ngữ của AI. Các ngôn ngữ lập trình thông dụng lúc đó khá nguyên thủy, và các ý tưởng của lập trình viên cũng tương ứng như vậy. Ngôn ngữ mặc định ở Cornell là một ngôn ngữ giống Pascal gọi là PL/I, và tình hình tương tự ở những nơi khác. Học Lisp mở rộng khái niệm về một chương trình của tôi nhanh đến mức phải mất nhiều năm tôi mới bắt đầu có cảm giác về giới hạn mới. Đây là điều tôi mong đợi đại học mang lại. Nó không diễn ra trong lớp học, như nó nên làm, nhưng điều đó không sao. Trong vài năm tiếp theo tôi đã rất hăng say. Tôi biết mình sẽ làm gì.

Đối với luận văn tốt nghiệp của mình, tôi đã dịch ngược SHRDLU. Trời ơi, tôi yêu việc làm việc trên chương trình đó. Nó là một đoạn mã rất hài lòng, nhưng điều làm nó thú vị hơn nữa là niềm tin của tôi — khó có thể tưởng tượng bây giờ, nhưng không phải là duy nhất vào năm 1985 — rằng nó đã leo lên những sườn thấp hơn của trí thông minh.

Tôi đã tham gia một chương trình tại Cornell không yêu cầu bạn chọn một ngành học. Bạn có thể chọn bất kỳ lớp nào bạn thích, và chọn bất kỳ cái gì bạn muốn ghi trên bằng tốt nghiệp của mình. Tất nhiên tôi đã chọn "Trí tuệ Nhân tạo." Khi tôi nhận được tấm bằng vật lý thực tế, tôi rất thất vọng khi thấy rằng các dấu ngoặc kép đã được đưa vào, khiến chúng đọc như các dấu ngoặc kép sợ hãi. Lúc đó điều này làm tôi bận tâm, nhưng bây giờ nó có vẻ hài hước chính xác, vì những lý do mà tôi sắp khám phá.

Tôi đã nộp đơn vào 3 trường cao học: MIT và Yale, nơi nổi tiếng về AI vào thời điểm đó, và Harvard, nơi tôi đã đến thăm vì Rich Draves học ở đó, và cũng là nơi của Bill Woods, người đã phát minh ra loại parser mà tôi sử dụng trong bản sao SHRDLU của mình. Chỉ Harvard chấp nhận tôi, vì vậy đó là nơi tôi đến.

Tôi không nhớ khoảnh khắc nó xảy ra, hoặc nếu có một khoảnh khắc cụ thể, nhưng trong năm đầu tiên của trường cao học tôi nhận ra rằng AI, như đã được thực hành vào thời điểm đó, là một trò lừa. Ý tôi là loại AI trong đó một chương trình được nói "con chó đang ngồi trên ghế" dịch điều này thành một số biểu diễn chính thức và thêm nó vào danh sách những điều nó biết.

Những chương trình này thực sự cho thấy rằng có một tập hợp con của ngôn ngữ tự nhiên là một ngôn ngữ chính thức. Nhưng đó là một tập hợp con rất hạn chế. Rõ ràng là có một khoảng cách không thể bắc qua giữa những gì chúng có thể làm và việc thực sự hiểu ngôn ngữ tự nhiên. Thực tế không phải chỉ đơn giản là dạy SHRDLU nhiều từ hơn. Cách làm AI đó, với các cấu trúc dữ liệu rõ ràng biểu diễn các khái niệm, sẽ không hoạt động. Sự hỏng hóc của nó, như thường xảy ra,

 tạo ra rất nhiều cơ hội để viết các bài báo về các băng keo có thể được áp dụng cho nó, nhưng nó không bao giờ sẽ đưa chúng ta đến Mike.

Vì vậy, tôi nhìn xung quanh để xem tôi có thể cứu vãn gì từ đống đổ nát của kế hoạch của mình, và có Lisp. Tôi biết từ kinh nghiệm rằng Lisp thú vị tự nó và không chỉ vì liên kết với AI, mặc dù đó là lý do chính mà mọi người quan tâm đến nó vào thời điểm đó. Vì vậy, tôi quyết định tập trung vào Lisp. Thực tế, tôi quyết định viết một cuốn sách về hack Lisp. Thật đáng sợ khi nghĩ về việc tôi biết ít như thế nào về hack Lisp khi tôi bắt đầu viết cuốn sách đó. Nhưng không có gì như việc viết một cuốn sách về một thứ để giúp bạn học nó. Cuốn sách, On Lisp, không được xuất bản cho đến năm 1993, nhưng tôi đã viết phần lớn nó trong trường cao học.

Khoa học Máy tính là một liên minh không thoải mái giữa hai nửa, lý thuyết và hệ thống. Những người làm lý thuyết chứng minh các điều, và những người làm hệ thống xây dựng các thứ. Tôi muốn xây dựng các thứ. Tôi rất tôn trọng lý thuyết — thực ra, có một sự nghi ngờ ngấm ngầm rằng đó là phần đáng ngưỡng mộ hơn của hai nửa — nhưng việc xây dựng các thứ dường như thú vị hơn nhiều.

Vấn đề với công việc hệ thống, tuy nhiên, là nó không kéo dài. Bất kỳ chương trình nào bạn viết hôm nay, dù tốt đến đâu, sẽ trở nên lỗi thời trong vài thập kỷ tốt nhất. Mọi người có thể đề cập đến phần mềm của bạn trong các chú thích, nhưng không ai sẽ thực sự sử dụng nó. Và thực sự, nó sẽ trông rất yếu ớt. Chỉ những người có cảm giác về lịch sử của lĩnh vực này mới nhận ra rằng, vào thời điểm đó, nó đã tốt.

Có một số máy tính Xerox Dandelions dư thừa ở phòng máy tính vào một thời điểm nào đó. Bất kỳ ai muốn một cái để chơi xung quanh có thể lấy một cái. Tôi đã bị cám dỗ trong một thời gian ngắn, nhưng chúng quá chậm so với tiêu chuẩn hiện tại; mục đích là gì? Không ai khác cũng muốn một cái, vì vậy chúng đi mất. Đó là điều đã xảy ra với công việc hệ thống.

Tôi không chỉ muốn xây dựng các thứ, mà còn muốn xây dựng các thứ kéo dài.

Trong trạng thái không hài lòng này, tôi đã đến thăm Rich Draves tại CMU vào năm 1988, nơi anh ấy đang học cao học. Một ngày tôi đi thăm Viện Carnegie, nơi tôi đã dành nhiều thời gian khi còn nhỏ. Khi nhìn một bức tranh ở đó, tôi nhận ra một điều có thể có vẻ hiển nhiên, nhưng là một bất ngờ lớn đối với tôi. Ở đó, ngay trên tường, là một thứ mà bạn có thể làm mà sẽ kéo dài. Các bức tranh không trở nên lỗi thời. Một số bức tranh tốt nhất đã có hàng trăm năm tuổi.

Hơn nữa, đây là một thứ mà bạn có thể kiếm sống. Không dễ dàng như bạn có thể bằng cách viết phần mềm, tất nhiên, nhưng tôi nghĩ nếu bạn thực sự chăm chỉ và sống thật tiết kiệm, thì có thể kiếm đủ để sống. Và như một nghệ sĩ, bạn có thể thực sự độc lập. Bạn sẽ không có ông chủ, hoặc thậm chí cần phải xin tài trợ nghiên cứu.

Tôi luôn thích nhìn các bức tranh. Tôi có thể làm chúng không? Tôi không biết. Tôi chưa bao giờ tưởng tượng rằng điều đó thậm chí có thể. Tôi biết một cách trí tuệ rằng người ta làm nghệ thuật — rằng nó không chỉ xuất hiện một cách tự phát — nhưng dường như những người làm nó là một loài khác. Họ hoặc sống từ lâu hoặc là những thiên tài bí ẩn làm những điều kỳ lạ trong các hồ sơ trong tạp chí Life. Ý tưởng thực sự có thể làm nghệ thuật, đặt động từ đó trước danh từ đó, dường như gần như kỳ diệu.

Mùa thu đó, tôi bắt đầu học các lớp nghệ thuật tại Harvard. Sinh viên cao học có thể học các lớp trong bất kỳ khoa nào, và người cố vấn của tôi, Tom Cheatham, rất dễ tính. Nếu ông ấy thậm chí biết về các lớp học kỳ lạ mà tôi đang học, ông ấy không bao giờ nói gì cả.

Vì vậy, bây giờ tôi đang trong chương trình Tiến sĩ khoa học máy tính, nhưng dự định trở thành một nghệ sĩ, nhưng cũng thực sự yêu thích hack Lisp và làm việc với On Lisp. Nói cách khác, như nhiều sinh viên cao học, tôi đang làm việc tích cực trên nhiều dự án không phải là luận án của tôi.

Tôi không thấy lối ra khỏi tình huống này. Tôi không muốn bỏ học cao học, nhưng làm thế nào khác tôi sẽ ra khỏi đây? Tôi nhớ khi bạn tôi Robert Morris bị đuổi khỏi Cornell vì viết con sâu internet năm 1988, tôi đã ghen tị vì anh ấy tìm được một cách ra khỏi trường cao học một cách ngoạn mục như vậy.

Rồi một ngày vào tháng 4 năm 1990, một vết nứt xuất hiện trên tường. Tôi tình cờ gặp giáo sư Cheatham và ông ấy hỏi liệu tôi đã tiến xa đủ để tốt nghiệp vào tháng Sáu đó chưa. Tôi chưa viết một từ nào của luận văn của mình, nhưng trong khoảnh khắc suy nghĩ nhanh nhất trong đời tôi, tôi quyết định thử viết một cái trong khoảng 5 tuần còn lại trước hạn, tái sử dụng các phần của On Lisp khi có thể, và tôi đã có thể trả lời, không có sự chậm trễ đáng kể "Vâng, tôi nghĩ vậy. Tôi sẽ cho ông một cái gì đó để đọc trong vài ngày."

Tôi chọn ứng dụng của các tiếp tục làm chủ đề. Nhìn lại, tôi nên viết về macros và các ngôn ngữ nhúng. Có cả một thế giới ở đó chưa được khám phá nhiều. Nhưng tất cả những gì tôi muốn là ra khỏi trường cao học, và luận văn của tôi viết nhanh chóng đã đủ, vừa đủ.

Trong khi đó, tôi đang nộp đơn vào các trường nghệ thuật. Tôi đã nộp đơn vào hai trường: RISD ở Mỹ, và Accademia di Belli Arti ở Florence, vì đó là trường nghệ thuật lâu đời nhất, tôi tưởng tượng rằng nó sẽ tốt. RISD chấp nhận tôi, và tôi không bao giờ nghe lại từ Accademia, vì vậy tôi đến Providence.

Tôi đã nộp đơn vào chương trình BFA tại RISD, có nghĩa là tôi phải học đại học một lần nữa. Điều này không kỳ lạ như nó nghe, vì tôi chỉ mới 25 tuổi, và các trường nghệ thuật đầy những người ở các độ tuổi khác nhau. RISD tính tôi là một sinh viên chuyển tiếp năm hai và nói rằng tôi phải làm nền tảng vào mùa hè đó. Nền tảng có nghĩa là các lớp mà mọi người phải học về các môn cơ bản như vẽ, màu sắc và thiết kế.

Gần cuối mùa hè, tôi nhận được một bất ngờ lớn: một lá thư từ Accademia, đã bị chậm trễ vì họ đã gửi nó đến Cambridge Anh thay vì Cambridge Mỹ, mời tôi tham gia kỳ thi đầu vào ở Florence vào mùa thu đó. Điều này chỉ còn vài tuần nữa. Bà chủ nhà tốt bụng của tôi cho phép tôi để lại đồ đạc của mình trong gác xép của bà. Tôi có một số tiền tiết kiệm từ công việc tư vấn tôi đã làm trong trường cao học; có lẽ đủ để sống một năm nếu tôi sống tiết kiệm. Bây giờ tất cả những gì tôi phải làm là học tiếng Ý.

Chỉ có người nước ngoài (stranieri) mới phải tham gia kỳ thi đầu vào này. Nhìn lại, nó có thể là một cách để loại trừ họ, vì có rất nhiều người nước ngoài bị thu hút bởi ý tưởng học nghệ thuật ở Florence mà các sinh viên Ý sẽ bị áp đảo về số lượng. Tôi đang ở trong tình trạng vẽ và vẽ từ nền tảng RISD mùa hè đó, nhưng tôi vẫn không biết làm thế nào tôi vượt qua kỳ thi viết. Tôi nhớ rằng tôi đã trả lời câu hỏi bài luận bằng cách viết về Cezanne, và tôi đã nâng cao mức độ trí tuệ càng cao càng tốt để tận dụng tối đa vốn từ vựng hạn chế của mình.

Tôi chỉ mới 25 tuổi mà đã có những mô hình nổi bật như vậy. Ở đây tôi đang chuẩn bị tham dự một lần nữa một tổ chức uy tín với hy vọng học hỏi về một chủ đề uy tín, và một lần nữa chuẩn bị thất vọng. Các sinh viên và giảng viên trong khoa hội họa tại Accademia là những người tốt nhất mà bạn có thể tưởng tượng, nhưng họ đã từ lâu đến một thỏa thuận mà theo đó sinh viên không yêu cầu giảng viên dạy bất cứ điều gì, và đổi lại giảng viên không yêu cầu sinh viên học bất cứ điều gì. Và cùng lúc đó, tất cả những người tham gia sẽ tuân thủ bề ngoài các quy ước của một xưởng nghệ thuật thế kỷ 19. Chúng tôi thực sự có một trong những cái bếp nhỏ đó, được đốt

 bằng củi, mà bạn thấy trong các bức tranh xưởng thế kỷ 19, và một người mẫu khỏa thân ngồi càng gần nó càng tốt mà không bị bỏng. Ngoại trừ hầu như không ai khác vẽ cô ấy ngoài tôi. Những sinh viên khác dành thời gian trò chuyện hoặc thỉnh thoảng cố gắng bắt chước những gì họ đã thấy trong các tạp chí nghệ thuật Mỹ.

Người mẫu của chúng tôi tình cờ sống ngay dưới phố từ tôi. Cô ấy kiếm sống từ sự kết hợp giữa làm mẫu và làm giả cho một người buôn đồ cổ địa phương. Cô ấy sẽ sao chép một bức tranh cũ không rõ ràng từ một cuốn sách, và sau đó ông ta sẽ lấy bản sao đó và làm giả nó để trông cũ.

Khi tôi là một sinh viên tại Accademia, tôi bắt đầu vẽ tĩnh vật trong phòng ngủ của mình vào ban đêm. Những bức tranh này rất nhỏ, vì phòng ngủ cũng nhỏ, và vì tôi vẽ chúng trên các mảnh vải còn lại, tất cả những gì tôi có thể mua lúc đó. Vẽ tĩnh vật khác với vẽ người, vì chủ thể, như tên của nó gợi ý, không thể di chuyển. Người không thể ngồi yên hơn khoảng 15 phút mỗi lần, và khi họ ngồi, họ không ngồi rất yên. Vì vậy, cách truyền thống để vẽ người là biết cách vẽ một người chung chung, mà sau đó bạn điều chỉnh để phù hợp với người cụ thể mà bạn đang vẽ. Trong khi một tĩnh vật bạn có thể, nếu bạn muốn, sao chép từng điểm ảnh từ những gì bạn thấy. Bạn không muốn dừng lại ở đó, tất nhiên, hoặc bạn sẽ chỉ có độ chính xác nhiếp ảnh, và điều làm cho một tĩnh vật thú vị là nó đã được qua đầu. Bạn muốn nhấn mạnh các gợi ý thị giác cho bạn biết, ví dụ, rằng lý do màu sắc thay đổi đột ngột ở một điểm nhất định là đó là cạnh của một vật thể. Bằng cách nhấn mạnh nhẹ nhàng những thứ như vậy, bạn có thể làm cho các bức tranh thực tế hơn so với ảnh không chỉ trong một số nghĩa bóng, mà còn trong nghĩa chặt chẽ về mặt thông tin.

Tôi thích vẽ tĩnh vật vì tôi tò mò về những gì tôi đang thấy. Trong cuộc sống hàng ngày, chúng ta không nhận thức được nhiều về những gì chúng ta thấy. Hầu hết các quá trình nhận thức thị giác được xử lý bởi các quá trình cấp thấp chỉ nói với não của bạn "đó là một giọt nước" mà không nói chi tiết như điểm sáng nhất và tối nhất ở đâu, hoặc "đó là một bụi cây" mà không nói hình dạng và vị trí của mỗi chiếc lá. Đây là một tính năng của bộ não, không phải là lỗi. Trong cuộc sống hàng ngày, sẽ rất khó chịu nếu bạn chú ý đến mỗi chiếc lá trên mỗi bụi cây. Nhưng khi bạn phải vẽ một thứ gì đó, bạn phải nhìn kỹ hơn, và khi bạn làm vậy, có rất nhiều điều để thấy. Bạn vẫn có thể nhận thấy những điều mới sau nhiều ngày cố gắng vẽ một thứ mà người ta thường coi là đương nhiên, cũng như bạn có thể sau nhiều ngày cố gắng viết một bài luận về một thứ mà người ta thường coi là đương nhiên.

Đây không phải là cách duy nhất để vẽ. Tôi không hoàn toàn chắc chắn rằng đó thậm chí là một cách tốt để vẽ. Nhưng nó dường như là một cách đặt cược đủ tốt để thử.

Giáo viên của chúng tôi, giáo sư Ulivi, là một người tốt. Ông có thể thấy tôi làm việc chăm chỉ, và cho tôi một điểm tốt, mà ông viết vào một dạng hộ chiếu mà mỗi sinh viên có. Nhưng Accademia không dạy tôi bất cứ điều gì ngoại trừ tiếng Ý, và tiền của tôi đang cạn dần, vì vậy vào cuối năm đầu tiên, tôi quay trở lại Mỹ.

Tôi muốn trở lại RISD, nhưng bây giờ tôi đã hết tiền và RISD rất đắt đỏ, vì vậy tôi quyết định kiếm việc làm một năm và sau đó trở lại RISD vào mùa thu tới. Tôi kiếm được một công việc tại một công ty gọi là Interleaf, công ty sản xuất phần mềm để tạo tài liệu. Bạn có ý nghĩa giống như Microsoft Word? Chính xác. Đó là cách tôi học được rằng phần mềm giá rẻ thường ăn phần mềm giá cao. Nhưng Interleaf vẫn còn vài năm sống sót nữa.

Interleaf đã làm một điều khá táo bạo. Được truyền cảm hứng từ Emacs, họ đã thêm một ngôn ngữ kịch bản, và thậm chí làm cho ngôn ngữ kịch bản đó là một phương ngữ của Lisp. Bây giờ họ muốn một người hack Lisp để viết các thứ trong đó. Đây là công việc gần nhất mà tôi có một công việc bình thường, và tôi xin lỗi sếp và đồng nghiệp của tôi, vì tôi là một nhân viên tồi. Lisp của họ là một lớp băng mỏng trên một chiếc bánh khổng lồ C, và vì tôi không biết C và không muốn học nó, tôi không bao giờ hiểu được phần lớn phần mềm. Thêm vào đó, tôi cực kỳ vô trách nhiệm. Đó là lúc mà một công việc lập trình có nghĩa là xuất hiện hàng ngày trong giờ làm việc nhất định. Điều đó dường như không tự nhiên đối với tôi, và về điểm này, phần còn lại của thế giới đang bắt đầu hiểu cách nghĩ của tôi, nhưng vào thời điểm đó, nó gây ra rất nhiều xung đột. Vào cuối năm, tôi dành nhiều thời gian làm việc bí mật trên On Lisp, mà lúc này tôi đã có hợp đồng xuất bản.

Điều tốt là tôi được trả rất nhiều tiền, đặc biệt là theo tiêu chuẩn của sinh viên nghệ thuật. Ở Florence, sau khi trả phần của tôi trong tiền thuê nhà, ngân sách của tôi cho mọi thứ khác là 7 đô la một ngày. Bây giờ tôi được trả hơn 4 lần số đó mỗi giờ, ngay cả khi tôi chỉ ngồi trong một cuộc họp. Bằng cách sống tiết kiệm, tôi không chỉ tiết kiệm đủ để trở lại RISD, mà còn trả hết các khoản vay đại học của mình.

Tôi học được một số điều hữu ích tại Interleaf, mặc dù chúng chủ yếu là về những điều không nên làm. Tôi học được rằng tốt hơn cho các công ty công nghệ do người sản phẩm điều hành hơn là người bán hàng (mặc dù bán hàng là một kỹ năng thực sự và những người giỏi về nó thực sự giỏi), rằng việc mã được chỉnh sửa bởi quá nhiều người dẫn đến lỗi, rằng không gian văn phòng rẻ không phải là một món hời nếu nó làm chán nản, rằng các cuộc họp có kế hoạch kém hơn các cuộc trò chuyện hành lang, rằng các khách hàng lớn, quan liêu là một nguồn tiền nguy hiểm, và rằng không có nhiều sự trùng lặp giữa giờ làm việc thông thường và thời gian tối ưu để hack, hoặc văn phòng thông thường và nơi tối ưu để làm việc đó.

Nhưng điều quan trọng nhất tôi học được, và mà tôi sử dụng trong cả Viaweb và Y Combinator, là phần cuối ăn phần đầu: rằng tốt khi trở thành lựa chọn "mức nhập cảnh", ngay cả khi điều đó sẽ ít danh giá hơn, bởi vì nếu bạn không, người khác sẽ, và sẽ đè bẹp bạn lên trần nhà. Điều này cũng có nghĩa là danh giá là một dấu hiệu nguy hiểm.

Khi tôi rời đi để trở lại RISD vào mùa thu tới, tôi đã sắp xếp để làm công việc tự do cho nhóm thực hiện các dự án cho khách hàng, và đó là cách tôi sống sót trong vài năm tiếp theo. Khi tôi quay lại thăm để thực hiện một dự án sau này, có người đã nói với tôi về một thứ mới gọi là HTML, mà như ông ta mô tả, là một dẫn xuất của SGML. Những người đam mê ngôn ngữ đánh dấu là một nguy hiểm nghề nghiệp tại Interleaf và tôi đã phớt lờ ông ta, nhưng sau này HTML trở thành một phần lớn trong cuộc sống của tôi.

Vào mùa thu năm 1992, tôi chuyển về Providence để tiếp tục tại RISD. Nền tảng chỉ là những thứ giới thiệu, và Accademia là một trò đùa (rất văn minh). Bây giờ tôi sẽ xem trường nghệ thuật thực sự như thế nào. Nhưng tiếc là nó giống Accademia hơn là không. Tổ chức tốt hơn, chắc chắn, và đắt đỏ hơn nhiều, nhưng bây giờ nó trở nên rõ ràng rằng trường nghệ thuật không mang cùng một mối quan hệ với nghệ thuật như trường y học mang với y học. Ít nhất không phải là khoa hội họa. Khoa dệt may, mà hàng xóm của tôi thuộc về, dường như khá nghiêm ngặt. Không nghi ngờ gì nữa, minh họa và kiến trúc cũng vậy. Nhưng hội họa là sau nghiêm ngặt. Sinh viên hội họa được kỳ vọng là biểu đạt bản thân, điều này đối với những người thế giới hơn có nghĩa là cố gắng nấu nướng một phong cách chữ ký riêng biệt.

Một phong cách chữ ký là tương đương thị giác của cái gọi trong kinh doanh show là "schtick": một thứ gì đó ngay lập tức

 xác định công việc là của bạn và không phải của ai khác. Ví dụ, khi bạn thấy một bức tranh trông giống như một loại truyện tranh nhất định, bạn biết đó là của Roy Lichtenstein. Vì vậy, nếu bạn thấy một bức tranh lớn loại này treo trong căn hộ của một nhà quản lý quỹ đầu tư, bạn biết anh ta đã trả hàng triệu đô la cho nó. Đó không phải luôn luôn là lý do tại sao các nghệ sĩ có một phong cách chữ ký, nhưng thường là lý do tại sao người mua trả rất nhiều tiền cho những tác phẩm như vậy.

Có nhiều sinh viên chân thành nữa: những đứa trẻ "có thể vẽ" ở trung học, và bây giờ đã đến trường nghệ thuật được cho là tốt nhất trong nước, để học vẽ tốt hơn nữa. Họ thường bị bối rối và nản lòng bởi những gì họ thấy ở RISD, nhưng họ tiếp tục, vì vẽ là những gì họ làm. Tôi không phải là một trong những đứa trẻ có thể vẽ ở trung học, nhưng tại RISD tôi chắc chắn gần gũi hơn với bộ lạc của họ hơn là bộ lạc tìm kiếm phong cách chữ ký.

Tôi học được rất nhiều trong lớp màu mà tôi đã học ở RISD, nhưng ngoài ra tôi cơ bản là tự dạy mình cách vẽ, và tôi có thể làm điều đó miễn phí. Vì vậy, vào năm 1993 tôi đã bỏ học. Tôi ở lại Providence một chút, và sau đó bạn tôi từ đại học Nancy Parmet đã làm tôi một ân huệ lớn. Một căn hộ kiểm soát tiền thuê trong một tòa nhà mà mẹ cô ấy sở hữu ở New York đang trở nên trống. Tôi có muốn nó không? Nó không đắt hơn nhiều so với chỗ hiện tại của tôi, và New York được cho là nơi các nghệ sĩ sống. Vì vậy, có, tôi muốn nó!

Các truyện tranh Asterix bắt đầu bằng cách phóng to vào một góc nhỏ của Roman Gaul mà hóa ra không được kiểm soát bởi người La Mã. Bạn có thể làm điều gì đó tương tự trên bản đồ của Thành phố New York: nếu bạn phóng to vào Upper East Side, có một góc nhỏ không giàu, hoặc ít nhất không phải vào năm 1993. Nó được gọi là Yorkville, và đó là ngôi nhà mới của tôi. Bây giờ tôi là một nghệ sĩ New York — theo nghĩa kỹ thuật là vẽ tranh và sống ở New York.

Tôi lo lắng về tiền bạc, vì tôi có thể cảm nhận được rằng Interleaf đang đi xuống. Công việc hack Lisp tự do rất hiếm, và tôi không muốn phải lập trình bằng ngôn ngữ khác, mà vào thời điểm đó sẽ có nghĩa là C++ nếu tôi may mắn. Vì vậy, với chiếc mũi chính xác của tôi cho cơ hội tài chính, tôi quyết định viết một cuốn sách khác về Lisp. Đây sẽ là một cuốn sách phổ biến, loại sách có thể được sử dụng như sách giáo khoa. Tôi tưởng tượng mình sống tiết kiệm từ tiền bản quyền và dành tất cả thời gian để vẽ. (Bức tranh trên bìa cuốn sách này, ANSI Common Lisp, là một bức tranh mà tôi đã vẽ khoảng thời gian này.)

Điều tốt nhất về New York đối với tôi là sự hiện diện của Idelle và Julian Weber. Idelle Weber là một họa sĩ, một trong những người thực tế sớm nhất, và tôi đã học lớp vẽ tranh của cô ấy tại Harvard. Tôi chưa bao giờ biết một giáo viên nào được học sinh yêu quý hơn cô ấy. Số lượng lớn học sinh cũ giữ liên lạc với cô ấy, bao gồm cả tôi. Sau khi tôi chuyển đến New York, tôi trở thành trợ lý xưởng của cô ấy.

Cô ấy thích vẽ trên các bức tranh lớn, vuông, từ 4 đến 5 feet mỗi bên. Một ngày vào cuối năm 1994 khi tôi đang căng một trong những con quái vật này, có gì đó trên radio về một nhà quản lý quỹ nổi tiếng. Anh ta không lớn tuổi hơn tôi nhiều, và rất giàu có. Ý nghĩ bất ngờ xuất hiện trong đầu tôi: tại sao tôi không trở nên giàu có? Sau đó, tôi sẽ có thể làm bất cứ điều gì tôi muốn.

Trong khi đó, tôi đã nghe ngày càng nhiều về thứ mới này gọi là World Wide Web. Robert Morris đã cho tôi xem khi tôi đến thăm anh ấy ở Cambridge, nơi anh ấy bây giờ đang học cao học tại Harvard. Dường như với tôi rằng web sẽ là một vấn đề lớn. Tôi đã thấy các giao diện người dùng đồ họa đã làm gì cho sự phổ biến của các máy tính cá nhân. Dường như web sẽ làm điều tương tự cho internet.

Nếu tôi muốn trở nên giàu có, đây là chuyến tàu tiếp theo rời nhà ga. Tôi đúng về phần đó. Điều tôi sai là ý tưởng. Tôi quyết định chúng tôi nên bắt đầu một công ty để đưa các phòng trưng bày nghệ thuật lên mạng. Tôi không thể thành thật nói rằng sau khi đọc rất nhiều đơn xin Y Combinator, đây là ý tưởng khởi nghiệp tồi tệ nhất từng có, nhưng nó nằm trong số đó. Các phòng trưng bày nghệ thuật không muốn lên mạng, và vẫn không muốn, không phải là những phòng trưng bày sang trọng. Đó không phải là cách họ bán. Tôi đã viết một số phần mềm để tạo trang web cho các phòng trưng bày, và Robert đã viết một số phần mềm để thay đổi kích thước hình ảnh và thiết lập một máy chủ http để phục vụ các trang. Sau đó, chúng tôi đã cố gắng ký hợp đồng với các phòng trưng bày. Nói rằng điều này là một bán hàng khó khăn là nói giảm. Khó để cho đi. Một vài phòng trưng bày cho phép chúng tôi tạo trang web miễn phí, nhưng không ai trả tiền cho chúng tôi.

Sau đó, một số cửa hàng trực tuyến bắt đầu xuất hiện, và tôi nhận ra rằng ngoại trừ các nút đặt hàng, chúng giống hệt như các trang web mà chúng tôi đã tạo ra cho các phòng trưng bày. Cái gọi là "cửa hàng trực tuyến" ấn tượng này là thứ mà chúng tôi đã biết cách xây dựng.

Vì vậy, vào mùa hè năm 1995, sau khi tôi nộp bản sao cuối cùng của ANSI Common Lisp cho nhà xuất bản, chúng tôi bắt đầu cố gắng viết phần mềm để xây dựng các cửa hàng trực tuyến. Ban đầu, đây sẽ là phần mềm máy tính để bàn thông thường, có nghĩa là phần mềm Windows. Đó là một viễn cảnh đáng báo động, vì cả hai chúng tôi đều không biết cách viết phần mềm Windows hay muốn học. Chúng tôi sống trong thế giới Unix. Nhưng chúng tôi quyết định ít nhất sẽ thử viết một nguyên mẫu trình tạo cửa hàng trên Unix. Robert đã viết một giỏ hàng, và tôi đã viết một trình tạo trang web mới cho các cửa hàng — tất nhiên là bằng Lisp.

Chúng tôi làm việc từ căn hộ của Robert ở Cambridge. Bạn cùng phòng của anh ấy đi vắng trong khoảng thời gian dài, trong thời gian đó tôi được ngủ trong phòng của anh ấy. Vì lý do nào đó không có khung giường hay ga trải giường, chỉ có một tấm nệm trên sàn. Một buổi sáng khi tôi nằm trên tấm nệm này, tôi có một ý tưởng làm tôi ngồi dậy như một chữ L viết hoa. Điều gì sẽ xảy ra nếu chúng tôi chạy phần mềm trên máy chủ và cho phép người dùng điều khiển nó bằng cách nhấp vào các liên kết? Sau đó, chúng tôi sẽ không bao giờ phải viết bất cứ thứ gì để chạy trên máy tính của người dùng. Chúng tôi có thể tạo các trang web trên cùng một máy chủ mà chúng tôi phục vụ chúng. Người dùng sẽ không cần gì hơn là một trình duyệt.

Loại phần mềm này, được gọi là ứng dụng web, hiện nay rất phổ biến, nhưng vào thời điểm đó không rõ rằng nó thậm chí có thể. Để tìm hiểu, chúng tôi quyết định thử làm một phiên bản của trình tạo cửa hàng của chúng tôi mà bạn có thể điều khiển thông qua trình duyệt. Một vài ngày sau, vào ngày 12 tháng 8, chúng tôi đã có một cái hoạt động. Giao diện người dùng rất tồi tệ, nhưng nó chứng minh rằng bạn có thể tạo một cửa hàng hoàn chỉnh thông qua trình duyệt, mà không cần bất kỳ phần mềm khách hàng nào hay gõ lệnh vào dòng lệnh trên máy chủ.

Bây giờ chúng tôi cảm thấy như chúng tôi thực sự đang nắm bắt được một thứ gì đó. Tôi có những hình ảnh về một thế hệ phần mềm mới hoàn toàn hoạt động theo cách này. Bạn sẽ không cần các phiên bản, hay các cổng, hay bất cứ thứ gì tương tự. Tại Interleaf có cả một nhóm gọi là Kỹ thuật Phát hành dường như ít nhất cũng lớn bằng nhóm thực sự viết phần mềm. Bây giờ bạn chỉ cần cập nhật phần mềm ngay trên máy chủ.

Chúng tôi đã thành lập một công ty mới mà chúng tôi gọi là Viaweb, sau thực tế là phần mềm của chúng tôi hoạt động qua web, và chúng tôi nhận được 10.000 đô la tài trợ ban đầu từ chồng của Idelle, Julian. Đổi lại cho việc đó và làm công việc pháp lý ban đầu và cho chúng tôi lời khuyên kinh doanh,

 chúng tôi cho ông ấy 10% công ty. Mười năm sau, thỏa thuận này trở thành mô hình cho Y Combinator. Chúng tôi biết những người sáng lập cần thứ gì đó như thế này, vì chúng tôi đã cần nó.

Ở giai đoạn này, tôi có một giá trị ròng âm, vì số tiền khoảng một nghìn đô la mà tôi có trong ngân hàng nhiều hơn đối trọng với số tiền tôi nợ chính phủ về thuế. (Tôi đã cẩn thận dành riêng phần thích hợp của số tiền tôi kiếm được từ việc tư vấn cho Interleaf? Không, tôi đã không.) Vì vậy, mặc dù Robert có tiền trợ cấp học sinh cao học, tôi cần số tiền tài trợ ban đầu đó để sống.

Ban đầu, chúng tôi hy vọng ra mắt vào tháng 9, nhưng chúng tôi trở nên tham vọng hơn về phần mềm khi chúng tôi làm việc trên nó. Cuối cùng, chúng tôi đã quản lý để xây dựng một trình tạo trang web WYSIWYG, theo nghĩa là khi bạn đang tạo các trang, chúng trông giống hệt như các trang tĩnh sẽ được tạo ra sau này, ngoại trừ việc thay vì dẫn đến các trang tĩnh, tất cả các liên kết đều tham chiếu đến các closures được lưu trữ trong một bảng băm trên máy chủ.

Nó đã giúp tôi đã học nghệ thuật, vì mục tiêu chính của một trình tạo cửa hàng trực tuyến là làm cho người dùng trông hợp pháp, và chìa khóa để trông hợp pháp là giá trị sản xuất cao. Nếu bạn có được bố cục trang và phông chữ và màu sắc đúng, bạn có thể làm cho một người điều hành một cửa hàng từ phòng ngủ của mình trông hợp pháp hơn một công ty lớn.

(Nếu bạn tò mò tại sao trang web của tôi trông rất cổ điển, đó là vì nó vẫn được làm bằng phần mềm này. Nó có thể trông thô cứng hôm nay, nhưng vào năm 1996, đó là lời cuối cùng trong sự tinh tế.)

Vào tháng 9, Robert nổi loạn. "Chúng ta đã làm việc này trong một tháng," anh ấy nói, "và nó vẫn chưa hoàn thành." Điều này thật buồn cười nhìn lại, vì anh ấy vẫn sẽ làm việc trên nó gần 3 năm sau. Nhưng tôi quyết định có lẽ nên tuyển thêm lập trình viên, và tôi hỏi Robert ai khác trong trường cao học với anh ấy thực sự giỏi. Anh ấy đã giới thiệu Trevor Blackwell, điều này ban đầu làm tôi ngạc nhiên, vì vào thời điểm đó tôi biết Trevor chủ yếu vì kế hoạch của anh ấy để giảm mọi thứ trong cuộc sống của mình thành một chồng thẻ ghi chú mà anh ấy mang theo. Nhưng Rtm đã đúng, như thường lệ. Trevor hóa ra là một hacker cực kỳ hiệu quả.

Làm việc với Robert và Trevor thật vui. Họ là hai người độc lập nhất mà tôi biết, và theo những cách hoàn toàn khác nhau. Nếu bạn có thể nhìn thấy bên trong bộ não của Rtm, nó sẽ trông giống như một nhà thờ New England thuộc địa, và nếu bạn có thể nhìn thấy bên trong của Trevor, nó sẽ trông giống như những điều tồi tệ nhất của Rococo Áo.

Chúng tôi bắt đầu kinh doanh, với 6 cửa hàng, vào tháng 1 năm 1996. Thật may là chúng tôi đã chờ vài tháng, vì mặc dù chúng tôi lo lắng chúng tôi đã muộn, thực tế chúng tôi gần như đã đến quá sớm. Có rất nhiều cuộc nói chuyện trong báo chí vào thời điểm đó về thương mại điện tử, nhưng không nhiều người thực sự muốn có cửa hàng trực tuyến.

Có ba phần chính cho phần mềm: trình soạn thảo, mà người ta sử dụng để xây dựng các trang web và tôi đã viết, giỏ hàng, mà Robert đã viết, và trình quản lý, mà Trevor đã viết để theo dõi các đơn hàng và thống kê. Trong thời đại của nó, trình soạn thảo là một trong những trình tạo trang web đa dụng tốt nhất. Tôi đã giữ mã chặt chẽ và không phải tích hợp với bất kỳ phần mềm nào khác ngoài của Robert và Trevor, vì vậy nó khá vui khi làm việc. Nếu tất cả những gì tôi phải làm là làm việc trên phần mềm này, 3 năm tiếp theo sẽ là khoảng thời gian dễ dàng nhất trong đời tôi. Thật không may, tôi phải làm rất nhiều thứ khác, tất cả những thứ mà tôi tồi hơn lập trình, và 3 năm tiếp theo thay vào đó là khoảng thời gian căng thẳng nhất.

Có rất nhiều công ty khởi nghiệp làm phần mềm thương mại điện tử trong nửa sau của những năm 90. Chúng tôi quyết tâm trở thành Microsoft Word, không phải Interleaf. Điều đó có nghĩa là dễ sử dụng và rẻ tiền. Thật may mắn cho chúng tôi là chúng tôi nghèo, vì điều đó khiến chúng tôi làm Viaweb thậm chí rẻ hơn chúng tôi nhận ra. Chúng tôi tính 100 đô la mỗi tháng cho một cửa hàng nhỏ và 300 đô la mỗi tháng cho một cửa hàng lớn. Giá thấp này là một điểm hấp dẫn lớn và một cái gai liên tục trong bên của các đối thủ cạnh tranh, nhưng đó không phải là do một cái nhìn sâu sắc thông minh mà chúng tôi đặt giá thấp. Chúng tôi không biết doanh nghiệp trả bao nhiêu cho các thứ. 300 đô la một tháng dường như là một số tiền lớn đối với chúng tôi.

Chúng tôi đã làm rất nhiều điều đúng một cách tình cờ như vậy. Ví dụ, chúng tôi đã làm cái mà bây giờ gọi là "làm những thứ không mở rộng quy mô", mặc dù vào thời điểm đó chúng tôi sẽ mô tả nó là "là thảm hại đến mức chúng tôi buộc phải thực hiện những biện pháp tuyệt vọng nhất để có người dùng." Biện pháp phổ biến nhất trong số đó là xây dựng các cửa hàng cho họ. Điều này dường như đặc biệt nhục nhã, vì toàn bộ lý do tồn tại của phần mềm của chúng tôi là người ta có thể sử dụng nó để tạo các cửa hàng của riêng mình. Nhưng bất cứ điều gì để có người dùng.

Chúng tôi học được nhiều hơn về bán lẻ hơn chúng tôi muốn biết. Ví dụ, nếu bạn chỉ có thể có một hình ảnh nhỏ của một chiếc áo sơ mi nam (và tất cả các hình ảnh đều nhỏ theo tiêu chuẩn hiện tại), tốt hơn là có một cận cảnh của cổ áo hơn là một bức ảnh của toàn bộ chiếc áo. Lý do tôi nhớ việc học điều này là nó có nghĩa là tôi phải quét lại khoảng 30 hình ảnh của áo sơ mi nam. Bộ quét đầu tiên của tôi rất đẹp nữa.

Mặc dù điều này có vẻ sai, đó là điều đúng đắn để làm. Xây dựng các cửa hàng cho người dùng dạy chúng tôi về bán lẻ, và về cảm giác khi sử dụng phần mềm của chúng tôi. Ban đầu, tôi vừa bối rối vừa ghê tởm bởi "kinh doanh" và nghĩ rằng chúng tôi cần một "người kinh doanh" để điều hành nó, nhưng một khi chúng tôi bắt đầu có người dùng, tôi đã chuyển đổi, tương tự như cách tôi đã chuyển đổi thành làm cha một khi tôi có con. Bất cứ điều gì người dùng muốn, tôi hoàn toàn là của họ. Có lẽ một ngày nào đó chúng tôi sẽ có nhiều người dùng đến mức tôi không thể quét hình ảnh của họ cho họ, nhưng trong khi đó, không có gì quan trọng hơn để làm.

Một điều khác mà tôi không hiểu lúc đó là tỷ lệ tăng trưởng là thử nghiệm tối thượng của một công ty khởi nghiệp. Tỷ lệ tăng trưởng của chúng tôi ổn. Chúng tôi có khoảng 70 cửa hàng vào cuối năm 1996 và khoảng 500 vào cuối năm 1997. Tôi đã sai lầm khi nghĩ rằng điều quan trọng là số lượng tuyệt đối của người dùng. Và đó là điều quan trọng theo nghĩa đó là số tiền bạn đang kiếm, và nếu bạn không kiếm đủ, bạn có thể phá sản. Nhưng về lâu dài, tỷ lệ tăng trưởng quan tâm đến số lượng tuyệt đối. Nếu chúng tôi là một công ty khởi nghiệp mà tôi đang cố vấn tại Y Combinator, tôi sẽ nói: Đừng quá căng thẳng, vì bạn đang làm tốt. Bạn đang tăng trưởng gấp 7 lần một năm. Chỉ cần không thuê quá nhiều người và bạn sẽ sớm có lãi, và sau đó bạn sẽ kiểm soát số phận của mình.

Thật không may, tôi đã thuê rất nhiều người, một phần vì các nhà đầu tư muốn tôi làm vậy, và một phần vì đó là điều mà các công ty khởi nghiệp làm trong thời kỳ bong bóng Internet. Một công ty chỉ có một số ít nhân viên sẽ có vẻ nghiệp dư. Vì vậy, chúng tôi không đạt được điểm hòa vốn cho đến khi Yahoo mua chúng tôi vào mùa hè năm 1998. Điều này có nghĩa là chúng tôi đã phụ thuộc vào các nhà đầu tư trong suốt cuộc đời của công ty. Và vì cả chúng tôi và các nhà đầu tư của chúng tôi đều là những người mới bắt đầu trong các công ty khởi nghiệp, kết quả là một mớ hỗn độn ngay cả theo tiêu chuẩn của công ty khởi nghiệp.

Đó là một sự giải thoát lớn khi Yahoo mua chúng tôi. Trên nguyên tắc, cổ phần Viaweb của chúng tôi có giá trị. Đó là một phần trong một doanh nghiệp có lợi nhuận và đang phát

 triển nhanh chóng. Nhưng đối với tôi, nó không cảm thấy rất có giá trị; tôi không có ý tưởng về cách định giá một doanh nghiệp, nhưng tôi rất nhận thức về những trải nghiệm gần chết mà chúng tôi dường như có mỗi vài tháng. Tôi cũng không thay đổi lối sống sinh viên cao học của mình đáng kể kể từ khi chúng tôi bắt đầu. Vì vậy, khi Yahoo mua chúng tôi, nó cảm thấy như đi từ rách rưới đến giàu có. Vì chúng tôi sẽ đến California, tôi đã mua một chiếc xe, một chiếc VW GTI màu vàng năm 1998. Tôi nhớ nghĩ rằng chỉ riêng ghế da của nó đã là điều sang trọng nhất tôi sở hữu.

Năm tiếp theo, từ mùa hè năm 1998 đến mùa hè năm 1999, phải là khoảng thời gian ít hiệu quả nhất của tôi. Tôi không nhận ra điều đó vào thời điểm đó, nhưng tôi đã kiệt sức từ nỗ lực và căng thẳng khi điều hành Viaweb. Một thời gian sau khi tôi đến California, tôi cố gắng tiếp tục phương thức lập trình đến 3 giờ sáng của mình, nhưng sự mệt mỏi kết hợp với văn hóa đã già trước tuổi của Yahoo và trang trại hình khối u ám ở Santa Clara dần kéo tôi xuống. Sau vài tháng, nó cảm thấy khó chịu như làm việc tại Interleaf.

Yahoo đã cho chúng tôi rất nhiều lựa chọn khi họ mua chúng tôi. Vào thời điểm đó, tôi nghĩ Yahoo được định giá quá cao đến mức họ sẽ không bao giờ có giá trị gì, nhưng ngạc nhiên của tôi, cổ phiếu đã tăng gấp 5 lần trong năm tiếp theo. Tôi đã giữ lại cho đến khi phần đầu tiên của các lựa chọn đã đầu tư, sau đó vào mùa hè năm 1999 tôi rời đi. Đã lâu rồi tôi không vẽ gì đến mức tôi gần như quên lý do tại sao tôi làm điều này. Não của tôi đã hoàn toàn đầy phần mềm và áo sơ mi nam trong 4 năm. Nhưng tôi đã làm điều này để trở nên giàu có để có thể vẽ, tôi tự nhắc nhở mình, và bây giờ tôi đã giàu có, vì vậy tôi nên đi vẽ.

Khi tôi nói tôi sẽ rời đi, sếp của tôi tại Yahoo đã có một cuộc trò chuyện dài với tôi về kế hoạch của tôi. Tôi đã nói với ông ấy về tất cả các loại hình ảnh mà tôi muốn vẽ. Vào thời điểm đó, tôi cảm động vì ông ấy đã quan tâm đến tôi. Bây giờ tôi nhận ra đó là vì ông ấy nghĩ tôi đang nói dối. Các lựa chọn của tôi vào thời điểm đó trị giá khoảng 2 triệu đô la mỗi tháng. Nếu tôi rời bỏ số tiền đó, chỉ có thể là để bắt đầu một công ty khởi nghiệp mới, và nếu tôi làm vậy, tôi có thể kéo theo một số người. Đây là đỉnh điểm của Bong bóng Internet, và Yahoo là tâm điểm của nó. Sếp của tôi vào thời điểm đó là một tỷ phú. Rời đi lúc đó để bắt đầu một công ty khởi nghiệp mới phải có vẻ như một kế hoạch đầy tham vọng, và đồng thời cũng có thể khả thi.

Nhưng tôi thực sự rời đi để vẽ, và tôi bắt đầu ngay lập tức. Không có thời gian để mất. Tôi đã đốt cháy 4 năm để trở nên giàu có. Bây giờ khi tôi nói chuyện với những người sáng lập đang rời đi sau khi bán công ty của họ, lời khuyên của tôi luôn luôn là: hãy đi nghỉ. Đó là điều tôi nên làm, chỉ đi đâu đó và không làm gì trong một tháng hoặc hai, nhưng ý tưởng đó không bao giờ xuất hiện trong đầu tôi.

Vì vậy, tôi đã cố gắng vẽ, nhưng tôi dường như không có năng lượng hoặc tham vọng. Một phần của vấn đề là tôi không quen biết nhiều người ở California. Tôi đã làm tăng thêm vấn đề này bằng cách mua một ngôi nhà trên núi Santa Cruz, với một tầm nhìn đẹp nhưng cách xa mọi nơi. Tôi đã chịu đựng trong vài tháng nữa, sau đó trong sự tuyệt vọng tôi đã quay lại New York, nơi trừ khi bạn hiểu về kiểm soát tiền thuê, bạn sẽ ngạc nhiên khi nghe rằng tôi vẫn còn căn hộ của mình, niêm phong như một lăng mộ của cuộc sống cũ của tôi. Idelle đang ở New York ít nhất, và có những người khác cố gắng vẽ ở đó, mặc dù tôi không quen biết ai trong số họ.

Khi tôi trở lại New York, tôi tiếp tục cuộc sống cũ của mình, ngoại trừ bây giờ tôi giàu có. Nó kỳ lạ như nó nghe. Tôi tiếp tục tất cả các mẫu cũ của mình, ngoại trừ bây giờ có những cánh cửa mà trước đây không có. Bây giờ khi tôi mệt mỏi vì đi bộ, tất cả những gì tôi phải làm là giơ tay lên, và (trừ khi trời mưa) một chiếc taxi sẽ dừng lại để đón tôi. Bây giờ khi tôi đi qua các nhà hàng nhỏ xinh đẹp, tôi có thể vào và gọi bữa trưa. Đó là một trải nghiệm thú vị trong một thời gian. Vẽ bắt đầu tiến triển tốt hơn. Tôi đã thử nghiệm với một loại tĩnh vật mới mà tôi sẽ vẽ một bức tranh theo cách cũ, sau đó chụp ảnh và in nó, phóng to, trên vải, và sau đó sử dụng đó làm lớp nền cho một tĩnh vật thứ hai, vẽ từ các đối tượng giống nhau (mà hy vọng chưa bị thối).

Trong khi đó, tôi tìm kiếm một căn hộ để mua. Bây giờ tôi thực sự có thể chọn khu vực để sống. Ở đâu, tôi hỏi bản thân mình và nhiều đại lý bất động sản khác nhau, là Cambridge của New York? Được hỗ trợ bởi những chuyến thăm thỉnh thoảng tới Cambridge thực sự, tôi dần nhận ra rằng không có cái nào. Hừ.

Khoảng thời gian này, vào mùa xuân năm 2000, tôi đã có một ý tưởng. Rõ ràng từ kinh nghiệm của chúng tôi với Viaweb rằng các ứng dụng web là tương lai. Tại sao không xây dựng một ứng dụng web để tạo ứng dụng web? Tại sao không để người ta chỉnh sửa mã trên máy chủ của chúng tôi thông qua trình duyệt, và sau đó lưu trữ các ứng dụng kết quả cho họ? Bạn có thể chạy tất cả các dịch vụ trên các máy chủ mà các ứng dụng này có thể sử dụng chỉ bằng cách gọi API: thực hiện và nhận cuộc gọi điện thoại, thao tác hình ảnh, chấp nhận thanh toán bằng thẻ tín dụng, v.v.

Tôi trở nên quá phấn khích với ý tưởng này đến mức tôi không thể nghĩ về bất cứ điều gì khác. Dường như rõ ràng rằng đây là tương lai. Tôi không thực sự muốn bắt đầu một công ty khác, nhưng rõ ràng rằng ý tưởng này sẽ phải hiện thực hóa như một công ty, vì vậy tôi quyết định chuyển đến Cambridge và bắt đầu nó. Tôi hy vọng sẽ dụ Robert vào làm việc cùng tôi, nhưng ở đó tôi gặp một trục trặc. Robert bây giờ là một nghiên cứu sinh sau tiến sĩ tại MIT, và mặc dù anh ấy đã kiếm được rất nhiều tiền lần cuối cùng tôi dụ anh ấy vào một trong những kế hoạch của tôi, nó cũng đã là một sự tiêu tốn lớn thời gian. Vì vậy, mặc dù anh ấy đồng ý rằng đó có vẻ là một ý tưởng khả thi, anh ấy kiên quyết từ chối làm việc trên nó.

Hừm. Vậy thì tôi sẽ làm nó một mình. Tôi tuyển Dan Giffin, người đã làm việc cho Viaweb, và hai sinh viên đại học muốn có công việc mùa hè, và chúng tôi bắt đầu làm việc cố gắng xây dựng thứ mà bây giờ rõ ràng là khoảng hai mươi công ty và một số dự án nguồn mở giá trị phần mềm. Ngôn ngữ để xác định ứng dụng tất nhiên sẽ là một phương ngữ của Lisp. Nhưng tôi không ngây thơ đến mức nghĩ rằng tôi có thể giới thiệu một Lisp công khai với khán giả chung; chúng tôi sẽ giấu các dấu ngoặc đơn, như Dylan đã làm.

Vào thời điểm đó có một tên gọi cho loại công ty mà Viaweb là, một "nhà cung cấp dịch vụ ứng dụng," hoặc ASP. Tên này không tồn tại lâu trước khi nó được thay thế bởi "phần mềm như một dịch vụ," nhưng nó tồn tại đủ lâu để tôi đặt tên cho công ty mới này: nó sẽ được gọi là Aspra.

Tôi bắt đầu làm việc trên trình tạo ứng dụng, Dan làm việc trên cơ sở hạ tầng mạng, và hai sinh viên đại học làm việc trên hai dịch vụ đầu tiên (hình ảnh và cuộc gọi điện thoại). Nhưng khoảng giữa mùa hè tôi nhận ra rằng tôi thực sự không muốn điều hành một công ty — đặc biệt không phải là một công ty lớn, điều này có vẻ như sẽ phải là. Tôi chỉ bắt đầu Viaweb vì tôi cần tiền. Bây giờ tôi không cần tiền nữa, tại sao tôi lại làm điều này? Nếu tầm nhìn này phải được hiện thực hóa như một công ty, thì bỏ qua tầm nhìn. Tôi sẽ xây dựng một phần nhỏ có thể được thực hiện như một dự án nguồn mở.

Thật ngạc nhiên, thời gian tôi dành làm việc trên những thứ này không hoàn toàn lãng phí. Sau khi chúng

 tôi bắt đầu Y Combinator, tôi thường gặp các công ty khởi nghiệp làm việc trên các phần của kiến trúc mới này, và rất hữu ích khi đã dành nhiều thời gian suy nghĩ về nó và thậm chí cố gắng viết một số phần của nó.

Phần nhỏ mà tôi sẽ xây dựng như một dự án nguồn mở là Lisp mới, mà tôi bây giờ thậm chí không cần giấu các dấu ngoặc đơn. Rất nhiều hacker Lisp mơ ước xây dựng một Lisp mới, một phần vì một trong những đặc điểm đặc biệt của ngôn ngữ này là nó có các phương ngữ, và một phần, tôi nghĩ, vì chúng tôi có trong đầu một hình thức Plato của Lisp mà tất cả các phương ngữ hiện có không đạt được. Tôi chắc chắn đã có. Vì vậy, vào cuối mùa hè, Dan và tôi chuyển sang làm việc trên phương ngữ Lisp mới này, mà tôi gọi là Arc, trong một ngôi nhà tôi mua ở Cambridge.

Mùa xuân năm sau, sét đánh. Tôi được mời tham gia một cuộc hội thảo về Lisp, vì vậy tôi đã tham gia một cuộc thảo luận về cách chúng tôi sử dụng Lisp tại Viaweb. Sau đó, tôi đăng một tệp postscript của bài thuyết trình này lên trang web paulgraham.com, mà tôi đã tạo ra nhiều năm trước bằng Viaweb nhưng chưa bao giờ sử dụng cho bất cứ điều gì. Trong một ngày, nó đã có 30.000 lượt xem trang. Điều gì trên thế giới đã xảy ra? Các url giới thiệu cho thấy ai đó đã đăng nó lên Slashdot.

Wow, tôi nghĩ, có một khán giả. Nếu tôi viết gì đó và đăng nó lên web, ai cũng có thể đọc nó. Điều đó có vẻ rõ ràng bây giờ, nhưng vào thời điểm đó là một điều ngạc nhiên. Trong thời đại in ấn, có một kênh hẹp đến độc giả, được bảo vệ bởi những con quái vật hung dữ được gọi là biên tập viên. Cách duy nhất để có được khán giả cho bất kỳ điều gì bạn viết là xuất bản nó dưới dạng sách, hoặc trên báo hoặc tạp chí. Bây giờ ai cũng có thể xuất bản bất cứ điều gì.

Điều này đã có thể về nguyên tắc từ năm 1993, nhưng không nhiều người đã nhận ra điều đó. Tôi đã tham gia mật thiết vào việc xây dựng cơ sở hạ tầng của web trong phần lớn thời gian đó, và là một nhà văn cũng vậy, và phải mất 8 năm để nhận ra điều đó. Ngay cả sau đó, phải mất vài năm để hiểu được ý nghĩa của nó. Nó có nghĩa là sẽ có một thế hệ mới các bài luận.

Trong thời đại in ấn, kênh xuất bản bài luận đã cực kỳ nhỏ. Ngoại trừ một vài nhà tư tưởng được chính thức bổ nhiệm đi đến các bữa tiệc đúng ở New York, những người duy nhất được phép xuất bản bài luận là các chuyên gia viết về chuyên ngành của họ. Có rất nhiều bài luận chưa bao giờ được viết, bởi vì không có cách nào để xuất bản chúng. Bây giờ chúng có thể được, và tôi sẽ viết chúng.

Tôi đã làm việc trên một số thứ khác nhau, nhưng nếu có một bước ngoặt nơi tôi tìm ra điều gì để làm, đó là khi tôi bắt đầu xuất bản các bài luận trực tuyến. Từ đó trở đi tôi biết rằng dù làm gì khác, tôi cũng sẽ luôn viết bài luận.

Tôi biết rằng các bài luận trực tuyến sẽ là một phương tiện cận biên ban đầu. Xã hội sẽ thấy chúng giống như những lời nói của những kẻ điên đăng trên các trang web GeoCities của họ hơn là những bài viết tế nhị và đẹp đẽ được xuất bản trong The New Yorker. Nhưng vào thời điểm này tôi biết đủ để thấy điều đó khích lệ thay vì chán nản.

Một trong những mô hình nổi bật nhất mà tôi nhận thấy trong cuộc sống của mình là nó đã hoạt động tốt như thế nào, ít nhất là đối với tôi, để làm việc trên những thứ không danh giá. Tĩnh vật luôn là hình thức ít danh giá nhất của hội họa. Viaweb và Y Combinator đều có vẻ lãng xẹt khi chúng tôi bắt đầu chúng. Tôi vẫn nhận được ánh mắt kính từ những người lạ khi họ hỏi tôi đang viết gì, và tôi giải thích rằng đó là một bài luận tôi sẽ đăng trên trang web của mình. Ngay cả Lisp, mặc dù danh giá về mặt trí tuệ tương tự như tiếng Latinh, cũng có vẻ không thời trang.

Không phải là các loại công việc không danh giá là tốt per se. Nhưng khi bạn thấy mình bị cuốn hút vào một loại công việc nào đó bất chấp sự thiếu danh giá hiện tại của nó, đó là một dấu hiệu rằng có gì đó thực sự để khám phá ở đó, và rằng bạn có động lực đúng. Động lực không tinh khiết là một mối nguy hiểm lớn đối với những người tham vọng. Nếu có điều gì đó sẽ dẫn bạn đi sai đường, đó sẽ là mong muốn gây ấn tượng với mọi người. Vì vậy, trong khi làm việc trên những thứ không danh giá không đảm bảo rằng bạn đang trên đúng đường, ít nhất nó đảm bảo rằng bạn không phải trên loại sai lầm phổ biến nhất.

Trong vài năm tới, tôi đã viết rất nhiều bài luận về nhiều chủ đề khác nhau. O'Reilly đã tái bản một bộ sưu tập của chúng dưới dạng một cuốn sách, có tên Hackers & Painters sau một trong những bài luận trong đó. Tôi cũng đã làm việc trên các bộ lọc spam và vẽ thêm một số bức tranh. Tôi thường tổ chức bữa tối cho một nhóm bạn mỗi tối thứ năm, điều này dạy tôi cách nấu ăn cho các nhóm. Và tôi đã mua một tòa nhà khác ở Cambridge, một nhà máy kẹo cũ (và sau này, người ta nói, là xưởng phim khiêu dâm), để sử dụng làm văn phòng.

Một đêm vào tháng 10 năm 2003, có một bữa tiệc lớn tại nhà tôi. Đó là một ý tưởng thông minh của bạn tôi Maria Daniels, một trong những người ăn tối thứ năm. Ba người chủ riêng biệt sẽ mời bạn bè của họ đến một bữa tiệc. Vì vậy, đối với mỗi khách, hai phần ba khách khác sẽ là những người họ không biết nhưng có lẽ sẽ thích. Một trong những khách mời là một người tôi không biết nhưng sẽ rất thích: một phụ nữ tên là Jessica Livingston. Một vài ngày sau, tôi mời cô ấy đi chơi.

Jessica phụ trách tiếp thị tại một ngân hàng đầu tư ở Boston. Ngân hàng này nghĩ rằng họ hiểu về các công ty khởi nghiệp, nhưng trong năm tiếp theo, khi cô ấy gặp bạn bè của tôi từ thế giới khởi nghiệp, cô ấy ngạc nhiên về sự khác biệt thực tế. Và những câu chuyện của họ rất thú vị. Vì vậy, cô ấy quyết định biên soạn một cuốn sách phỏng vấn với những người sáng lập công ty khởi nghiệp.

Khi ngân hàng gặp vấn đề tài chính và cô ấy phải sa thải một nửa nhân viên của mình, cô ấy bắt đầu tìm kiếm một công việc mới. Đầu năm 2005, cô ấy phỏng vấn cho một công việc tiếp thị tại một công ty đầu tư mạo hiểm ở Boston. Họ mất hàng tuần để đưa ra quyết định, và trong thời gian này tôi bắt đầu nói với cô ấy về tất cả những thứ cần được cải thiện về đầu tư mạo hiểm. Họ nên thực hiện một số lượng lớn các khoản đầu tư nhỏ hơn thay vì một số ít lớn, họ nên tài trợ cho những người sáng lập trẻ, kỹ thuật hơn là các MBA, họ nên để các nhà sáng lập giữ vị trí CEO, và v.v.

Một trong những mánh khóe của tôi để viết bài luận luôn là tham gia các buổi thuyết trình. Việc phải đứng trước một nhóm người và nói cho họ điều gì đó mà không lãng phí thời gian của họ là một động lực tuyệt vời cho trí tưởng tượng. Khi Hội Máy tính Harvard, câu lạc bộ máy tính sinh viên, mời tôi thuyết trình, tôi quyết định tôi sẽ nói cho họ cách bắt đầu một công ty khởi nghiệp. Có lẽ họ sẽ có thể tránh được những sai lầm tồi tệ nhất mà chúng tôi đã mắc phải.

Vì vậy, tôi đã tham gia buổi thuyết trình này, trong quá trình đó tôi đã nói rằng nguồn tài trợ hạt giống tốt nhất là những người sáng lập công ty khởi nghiệp thành công, bởi vì sau đó họ sẽ là nguồn lời khuyên nữa. Nơi mà dường như họ tất cả đều đang nhìn tôi mong đợi. Hoảng sợ trước viễn cảnh hộp thư của tôi bị ngập tràn bởi các kế hoạch kinh doanh (nếu tôi chỉ biết), tôi thốt ra "Nhưng không phải tôi!" và tiếp tục buổi thuyết trình. Nhưng sau đó tôi nhận ra rằng tôi thực sự nên ngừng trì hoãn về đầu tư thiên thần. Tôi đã định làm từ khi Yahoo mua chúng tôi, và bây giờ đã 7 năm sau và tôi vẫn chưa thực hiện một khoản đầu tư thiên thần nào.

Trong khi đó, tôi đã âm mưu với Robert và Trevor về các dự án mà chúng tôi có thể làm việc cùng nhau. Tôi nhớ làm việc với họ, và dường như phải có một điều gì đó chúng tôi có thể hợp tác.

Khi Jessica và

 tôi đang đi bộ về nhà sau bữa tối vào ngày 11 tháng 3, tại góc đường Garden và Walker, ba sợi chỉ này hội tụ. Quên các công ty đầu tư mạo hiểm đang mất quá nhiều thời gian để đưa ra quyết định của họ. Chúng tôi sẽ bắt đầu công ty đầu tư của riêng mình và thực sự thực hiện các ý tưởng mà chúng tôi đã nói về. Tôi sẽ tài trợ nó, và Jessica có thể từ bỏ công việc và làm việc cho nó, và chúng tôi sẽ có Robert và Trevor là đối tác nữa.

Một lần nữa, sự thiếu hiểu biết đã hoạt động có lợi cho chúng tôi. Chúng tôi không có ý tưởng về cách làm nhà đầu tư thiên thần, và ở Boston năm 2005 không có Ron Conways để học hỏi. Vì vậy, chúng tôi chỉ làm những gì có vẻ như là lựa chọn rõ ràng, và một số điều chúng tôi đã làm hóa ra là mới mẻ.

Có nhiều thành phần khác nhau cho Y Combinator, và chúng tôi không phát hiện ra tất cả cùng một lúc. Phần chúng tôi hiểu đầu tiên là làm nhà đầu tư thiên thần. Vào thời điểm đó, hai từ này không đi cùng nhau. Có các công ty đầu tư mạo hiểm, là các công ty tổ chức với những người có công việc là thực hiện các khoản đầu tư, nhưng họ chỉ làm các khoản đầu tư lớn, hàng triệu đô la. Và có các thiên thần, người làm các khoản đầu tư nhỏ hơn, nhưng đây là những cá nhân thường tập trung vào các thứ khác và thực hiện các khoản đầu tư bên lề. Và không ai trong số họ giúp đỡ các nhà sáng lập đủ ở giai đoạn đầu. Chúng tôi biết các nhà sáng lập bất lực trong một số khía cạnh, bởi vì chúng tôi nhớ rằng chúng tôi đã bất lực như thế nào. Ví dụ, một điều mà Julian đã làm cho chúng tôi mà dường như là phép thuật là để chúng tôi được thiết lập như một công ty. Chúng tôi đã ổn khi viết phần mềm khá khó, nhưng thực sự thành lập công ty, với các quy định và cổ phiếu và tất cả những thứ đó, làm thế nào bạn làm điều đó? Kế hoạch của chúng tôi là không chỉ thực hiện các khoản đầu tư hạt giống, mà còn làm cho các công ty khởi nghiệp tất cả những gì Julian đã làm cho chúng tôi.

YC không được tổ chức như một quỹ. Nó đủ rẻ để chạy mà chúng tôi đã tài trợ nó bằng tiền của mình. Điều đó đi qua 99% độc giả, nhưng các nhà đầu tư chuyên nghiệp đang nghĩ "Wow, điều đó có nghĩa là họ nhận được tất cả các khoản lợi nhuận." Nhưng một lần nữa, điều này không phải là do bất kỳ hiểu biết đặc biệt nào của chúng tôi. Chúng tôi không biết các công ty đầu tư mạo hiểm được tổ chức như thế nào. Nó chưa bao giờ xuất hiện trong đầu chúng tôi để cố gắng huy động một quỹ, và nếu có, chúng tôi sẽ không biết bắt đầu từ đâu.

Điều đặc biệt nhất về YC là mô hình theo đợt: để tài trợ cho một nhóm công ty khởi nghiệp cùng một lúc, hai lần một năm, và sau đó dành ba tháng tập trung mạnh vào việc cố gắng giúp đỡ họ. Phần này chúng tôi phát hiện ra tình cờ, không chỉ ngầm mà còn rõ ràng do sự thiếu hiểu biết của chúng tôi về đầu tư. Chúng tôi cần kinh nghiệm làm nhà đầu tư. Cách nào tốt hơn, chúng tôi nghĩ, là tài trợ cho một nhóm công ty khởi nghiệp cùng một lúc? Chúng tôi biết rằng sinh viên đại học nhận công việc tạm thời tại các công ty công nghệ trong mùa hè. Tại sao không tổ chức một chương trình mùa hè nơi họ sẽ bắt đầu các công ty khởi nghiệp thay vì? Chúng tôi sẽ không cảm thấy tội lỗi vì theo một nghĩa nào đó là những nhà đầu tư giả, vì họ sẽ tương tự là những người sáng lập giả. Vì vậy, mặc dù chúng tôi có thể không kiếm được nhiều tiền từ đó, ít nhất chúng tôi sẽ có cơ hội thực hành làm nhà đầu tư trên họ, và đối với họ, mùa hè có lẽ sẽ thú vị hơn làm việc tại Microsoft.

Chúng tôi sẽ sử dụng tòa nhà tôi sở hữu ở Cambridge làm trụ sở. Chúng tôi sẽ cùng ăn tối ở đó mỗi tuần một lần — vào các buổi tối thứ ba, vì tôi đã nấu ăn cho những người ăn tối thứ năm vào các buổi tối thứ năm — và sau bữa tối chúng tôi sẽ mời các chuyên gia về các công ty khởi nghiệp đến thuyết trình.

Chúng tôi biết rằng sinh viên đại học đang quyết định về công việc mùa hè vào thời điểm đó, vì vậy trong một vài ngày chúng tôi đã nấu chín thứ gì đó gọi là Chương trình Người sáng lập Mùa hè, và tôi đã đăng một thông báo trên trang web của mình, mời sinh viên đại học đăng ký. Tôi chưa bao giờ tưởng tượng rằng viết các bài luận sẽ là một cách để có "dòng giao dịch", như các nhà đầu tư gọi, nhưng hóa ra đó là nguồn hoàn hảo. Chúng tôi nhận được 225 đơn đăng ký cho Chương trình Người sáng lập Mùa hè, và chúng tôi ngạc nhiên khi thấy rằng nhiều người trong số họ là từ những người đã tốt nghiệp, hoặc sắp tốt nghiệp vào mùa xuân đó. Đã rõ ràng rằng SFP này đang bắt đầu cảm thấy nghiêm túc hơn so với dự định của chúng tôi.

Chúng tôi mời khoảng 20 trong số 225 nhóm phỏng vấn trực tiếp, và từ đó chúng tôi chọn 8 nhóm để tài trợ. Họ là một nhóm ấn tượng. Lô đầu tiên này bao gồm reddit, Justin Kan và Emmett Shear, người sau này sáng lập Twitch, Aaron Swartz, người đã giúp viết đặc tả RSS và vài năm sau đó trở thành một liệt sĩ cho quyền truy cập mở, và Sam Altman, người sau này trở thành chủ tịch thứ hai của YC. Tôi không nghĩ rằng hoàn toàn là may mắn khi lô đầu tiên tốt như vậy. Bạn phải rất táo bạo để đăng ký một thứ kỳ lạ như Chương trình Người sáng lập Mùa hè thay vì một công việc mùa hè tại một nơi hợp pháp như Microsoft hoặc Goldman Sachs.

Thỏa thuận cho các công ty khởi nghiệp dựa trên sự kết hợp giữa thỏa thuận chúng tôi đã thực hiện với Julian (10k đô la cho 10%) và những gì Robert nói rằng sinh viên cao học MIT nhận được cho mùa hè (6k đô la). Chúng tôi đã đầu tư 6k đô la mỗi người sáng lập, mà trong trường hợp hai người sáng lập điển hình là 12k đô la, để đổi lấy 6%. Điều đó phải là công bằng, vì nó gấp đôi so với thỏa thuận mà chúng tôi đã nhận. Thêm vào đó, mùa hè đầu tiên này rất nóng, Jessica đã mang cho những người sáng lập máy điều hòa không khí miễn phí.

Khá nhanh chóng tôi nhận ra rằng chúng tôi đã vô tình phát hiện ra cách để mở rộng tài trợ cho các công ty khởi nghiệp. Tài trợ các công ty khởi nghiệp theo lô thuận tiện hơn cho chúng tôi, vì nó có nghĩa là chúng tôi có thể làm những điều cho rất nhiều công ty khởi nghiệp cùng một lúc, nhưng là một phần của lô cũng tốt hơn cho các công ty khởi nghiệp nữa. Nó giải quyết một trong những vấn đề lớn nhất mà các nhà sáng lập phải đối mặt: sự cô lập. Bây giờ bạn không chỉ có đồng nghiệp, mà còn có đồng nghiệp hiểu các vấn đề mà bạn đang đối mặt và có thể nói cho bạn biết cách họ đang giải quyết chúng.

Khi YC phát triển, chúng tôi bắt đầu nhận thấy các lợi ích khác của quy mô. Các cựu sinh viên trở thành một cộng đồng chặt chẽ, tận tâm giúp đỡ lẫn nhau, và đặc biệt là lô hiện tại, nơi họ nhớ rằng họ đã từng ở trong hoàn cảnh đó. Chúng tôi cũng nhận thấy rằng các công ty khởi nghiệp trở thành khách hàng của nhau. Chúng tôi từng đùa gọi nó là "GDP của YC", nhưng khi YC phát triển, điều này ngày càng ít trở thành trò đùa. Bây giờ nhiều công ty khởi nghiệp có khách hàng ban đầu gần như hoàn toàn từ những người bạn cùng lô của họ.

Tôi không ban đầu dự định YC là một công việc toàn thời gian. Tôi sẽ làm ba việc: hack, viết bài luận và làm việc tại YC. Khi YC phát triển, và tôi ngày càng hứng thú về nó, nó bắt đầu chiếm nhiều hơn một phần ba sự chú ý của tôi. Nhưng trong vài năm đầu tiên, tôi vẫn có thể làm việc trên các thứ khác.

Vào mùa hè năm 2006, Robert và tôi bắt đầu làm việc trên một phiên bản mới của Arc. Phiên bản này khá nhanh, vì nó được biên dịch thành Scheme. Để kiểm tra Arc mới này, tôi đã viết Hacker News bằng nó. Ban đầu nó được dự định là một trình tổng hợp tin tức cho các nhà sáng lập công ty khởi nghiệp và được gọi là Startup News, nhưng sau vài tháng tôi đã chán ngán đọc về không gì ngoài các công ty khởi nghiệp. Thêm vào đó, không phải các nhà sáng lập công ty khởi nghiệp mà chúng tôi muốn tiếp cận. Đó là các nhà sáng lập tương lai. Vì vậy, tôi đã đổi tên thành Hacker News

 và chủ đề thành bất cứ điều gì khơi gợi sự tò mò trí tuệ của mình.

HN chắc chắn là tốt cho YC, nhưng nó cũng là nguồn căng thẳng lớn nhất đối với tôi. Nếu tất cả những gì tôi phải làm là chọn và giúp đỡ các nhà sáng lập, cuộc sống sẽ rất dễ dàng. Và điều đó ngụ ý rằng HN là một sai lầm. Chắc chắn nguồn căng thẳng lớn nhất trong công việc của một người ít nhất phải là một cái gì đó gần cốt lõi của công việc. Trong khi đó, tôi giống như ai đó đau đớn khi chạy marathon không phải từ nỗ lực chạy, mà vì tôi có một cái giày không vừa chân. Khi tôi đang giải quyết một số vấn đề khẩn cấp trong YC, có khoảng 60% khả năng nó liên quan đến HN, và 40% khả năng nó liên quan đến tất cả những thứ khác kết hợp lại.

Ngoài HN, tôi đã viết tất cả phần mềm nội bộ của YC bằng Arc. Nhưng trong khi tôi tiếp tục làm việc nhiều trong Arc, tôi dần dần ngừng làm việc trên Arc, một phần vì tôi không có thời gian, và một phần vì nó ít hấp dẫn hơn để nghịch ngợm với ngôn ngữ khi chúng tôi có tất cả cơ sở hạ tầng phụ thuộc vào nó. Vì vậy, bây giờ ba dự án của tôi giảm xuống còn hai: viết bài luận và làm việc tại YC.

YC khác với các loại công việc khác mà tôi đã làm. Thay vì quyết định cho mình điều gì để làm, các vấn đề đến với tôi. Mỗi 6 tháng lại có một lô công ty khởi nghiệp mới, và các vấn đề của họ, bất kể là gì, trở thành vấn đề của chúng tôi. Đó là một công việc rất thú vị, vì các vấn đề của họ rất đa dạng, và các nhà sáng lập tốt rất hiệu quả. Nếu bạn đang cố gắng học nhiều nhất có thể về các công ty khởi nghiệp trong thời gian ngắn nhất, bạn không thể chọn cách tốt hơn để làm điều đó.

Có những phần của công việc mà tôi không thích. Tranh chấp giữa các nhà sáng lập, xác định khi người ta nói dối với chúng tôi, tranh cãi với những người ngược đãi các công ty khởi nghiệp, và v.v. Nhưng tôi đã làm việc chăm chỉ ngay cả ở những phần mà tôi không thích. Tôi bị ám ảnh bởi một điều mà Kevin Hale từng nói về các công ty: "Không ai làm việc chăm chỉ hơn sếp." Anh ấy có ý nghĩa nó cả về mô tả và quy định, và phần thứ hai khiến tôi sợ hãi. Tôi muốn YC tốt, vì vậy nếu mức độ chăm chỉ của tôi đặt giới hạn trên cho mức độ chăm chỉ của mọi người khác, tôi phải làm việc rất chăm chỉ.

Một ngày vào năm 2010, khi anh ấy đang thăm California để phỏng vấn, Robert Morris đã làm một điều đáng kinh ngạc: anh ấy đã cho tôi lời khuyên mà không được yêu cầu. Tôi chỉ có thể nhớ anh ấy làm điều đó một lần trước đó. Một ngày tại Viaweb, khi tôi bị đau từ sỏi thận, anh ấy đề nghị rằng sẽ là một ý tưởng tốt nếu anh ấy đưa tôi đến bệnh viện. Đó là những gì cần thiết để Rtm đưa ra lời khuyên mà không được yêu cầu. Vì vậy, tôi nhớ rõ ràng lời nói của anh ấy. "Bạn biết," anh ấy nói, "bạn nên chắc chắn rằng Y Combinator không phải là điều thú vị cuối cùng bạn làm."

Vào thời điểm đó, tôi không hiểu anh ấy muốn nói gì, nhưng dần dần tôi nhận ra rằng anh ấy đang nói rằng tôi nên từ bỏ. Điều này có vẻ là lời khuyên kỳ lạ, vì YC đang làm rất tốt. Nhưng nếu có một điều hiếm hơn là Rtm đưa ra lời khuyên, đó là Rtm sai. Vì vậy, điều này khiến tôi suy nghĩ. Đúng là trên con đường hiện tại của tôi, YC sẽ là điều cuối cùng tôi làm, vì nó chỉ chiếm nhiều hơn sự chú ý của tôi. Nó đã ăn mất Arc, và đang trong quá trình ăn mất các bài luận nữa. Hoặc YC là công việc đời tôi hoặc tôi sẽ phải rời bỏ cuối cùng. Và nó không phải là, vì vậy tôi sẽ.

Mùa hè năm 2012 mẹ tôi bị đột quỵ, và nguyên nhân hóa ra là một cục máu đông do ung thư ruột. Cú đột quỵ đã phá hủy sự cân bằng của bà, và bà được đưa vào nhà dưỡng lão, nhưng bà thực sự muốn ra khỏi đó và trở về nhà của mình, và chị tôi và tôi quyết tâm giúp bà làm điều đó. Tôi thường bay lên Oregon để thăm bà, và tôi có nhiều thời gian để suy nghĩ trên các chuyến bay đó. Trên một trong số chúng, tôi nhận ra rằng tôi đã sẵn sàng giao YC cho người khác.

Tôi hỏi Jessica nếu cô ấy muốn làm chủ tịch, nhưng cô ấy không muốn, vì vậy chúng tôi quyết định sẽ cố gắng tuyển Sam Altman. Chúng tôi đã nói chuyện với Robert và Trevor và chúng tôi đồng ý rằng sẽ thay đổi toàn bộ ban lãnh đạo. Đến lúc đó, YC đã được kiểm soát bởi LLC ban đầu mà chúng tôi bốn người đã thành lập. Nhưng chúng tôi muốn YC tồn tại lâu dài, và để làm điều đó, nó không thể được kiểm soát bởi những người sáng lập. Vì vậy, nếu Sam nói có, chúng tôi sẽ để anh ấy tổ chức lại YC. Robert và tôi sẽ nghỉ hưu, và Jessica và Trevor sẽ trở thành các đối tác bình thường.

Khi chúng tôi hỏi Sam nếu anh ấy muốn làm chủ tịch của YC, ban đầu anh ấy nói không. Anh ấy muốn bắt đầu một công ty để chế tạo lò phản ứng hạt nhân. Nhưng tôi tiếp tục thúc đẩy, và vào tháng 10 năm 2013 anh ấy cuối cùng đã đồng ý. Chúng tôi quyết định anh ấy sẽ tiếp quản bắt đầu từ lô mùa đông 2014. Trong phần còn lại của năm 2013, tôi đã giao cho Sam ngày càng nhiều việc điều hành YC, một phần để anh ấy có thể học việc, và một phần vì tôi tập trung vào mẹ tôi, người có bệnh ung thư đã trở lại.

Bà qua đời vào ngày 15 tháng 1 năm 2014. Chúng tôi biết điều này sẽ đến, nhưng vẫn khó khi nó xảy ra.

Tôi tiếp tục làm việc tại YC cho đến tháng 3, để giúp lô công ty khởi nghiệp đó qua Ngày Trình diễn, sau đó tôi nghỉ ngơi khá hoàn toàn. (Tôi vẫn nói chuyện với các cựu sinh viên và các công ty khởi nghiệp mới làm việc trên những thứ tôi quan tâm, nhưng điều đó chỉ mất vài giờ mỗi tuần.)

Tôi nên làm gì tiếp theo? Lời khuyên của Rtm không bao gồm gì về điều đó. Tôi muốn làm điều gì đó hoàn toàn khác, vì vậy tôi quyết định tôi sẽ vẽ. Tôi muốn xem mình có thể giỏi đến đâu nếu tôi thực sự tập trung vào nó. Vì vậy, ngày sau khi tôi ngừng làm việc tại YC, tôi bắt đầu vẽ. Tôi đã lạc nghề và phải mất một thời gian để lấy lại phong độ, nhưng ít nhất nó rất hấp dẫn.

Tôi đã dành hầu hết phần còn lại của năm 2014 để vẽ. Tôi chưa bao giờ có thể làm việc không bị gián đoạn như vậy trước đây, và tôi trở nên giỏi hơn so với trước đây. Không đủ giỏi, nhưng tốt hơn. Sau đó, vào tháng 11, ngay giữa một bức tranh, tôi đã cạn kiệt năng lượng. Đến lúc đó tôi luôn tò mò xem bức tranh tôi đang làm sẽ ra sao, nhưng đột nhiên hoàn thành bức này dường như là một việc vặt. Vì vậy, tôi đã ngừng làm việc trên nó và làm sạch cọ của mình và chưa vẽ từ đó. Ít nhất là đến bây giờ.

Tôi nhận ra rằng điều đó nghe có vẻ khá yếu đuối. Nhưng sự chú ý là một trò chơi tổng bằng không. Nếu bạn có thể chọn những gì để làm, và bạn chọn một dự án không phải là tốt nhất (hoặc ít nhất là tốt) cho bạn, thì nó đang cản trở một dự án khác là. Và ở tuổi 50 có một số chi phí cơ hội để lãng phí thời gian.

Tôi bắt đầu viết bài luận lại, và đã viết rất nhiều bài luận mới trong vài tháng tiếp theo. Tôi thậm chí đã viết vài bài không về các công ty khởi nghiệp. Sau đó vào tháng 3 năm 2015 tôi bắt đầu làm việc trên Lisp lại.

Điều đặc biệt về Lisp là cốt lõi của nó là một ngôn ngữ được định nghĩa bằng cách viết một trình thông dịch trong chính nó. Ban đầu nó không được dự định là một ngôn ngữ lập trình theo nghĩa thông thường. Nó được dự định là một mô hình hình thức của tính toán, một sự thay thế cho máy Turing. Nếu bạn muốn viết một trình thông dịch cho một ngôn ngữ trong chính nó, tập hợp tối thiểu các toán tử định sẵn bạn cần là gì? Lisp mà John McCarthy phát minh ra, hoặc chính xác hơn là phát hiện ra, là một câu trả lời cho câu hỏi đó.

McCarthy không nhận ra rằng Lisp này thậm chí có

 thể được sử dụng để lập trình máy tính cho đến khi sinh viên tốt nghiệp của ông, Steve Russell, đề xuất điều đó. Russell đã dịch trình thông dịch của McCarthy sang ngôn ngữ máy IBM 704, và từ đó Lisp bắt đầu cũng trở thành một ngôn ngữ lập trình theo nghĩa thông thường. Nhưng nguồn gốc của nó như một mô hình hình thức của tính toán đã mang lại cho nó một sức mạnh và sự thanh lịch mà các ngôn ngữ khác không thể sánh kịp. Chính điều này đã thu hút tôi ở đại học, mặc dù lúc đó tôi không hiểu tại sao.

Lisp năm 1960 của McCarthy không làm gì khác ngoài việc diễn giải các biểu thức Lisp. Nó thiếu nhiều thứ mà bạn muốn trong một ngôn ngữ lập trình. Vì vậy, những điều này phải được thêm vào, và khi chúng được thêm vào, chúng không được định nghĩa bằng cách tiếp cận tiên đề ban đầu của McCarthy. Điều đó không khả thi vào thời điểm đó. McCarthy đã kiểm tra trình thông dịch của mình bằng cách mô phỏng thực thi của các chương trình. Nhưng nó đã gần đạt đến giới hạn của các trình thông dịch mà bạn có thể kiểm tra theo cách đó — thực tế, có một lỗi trong đó mà McCarthy đã bỏ qua. Để kiểm tra một trình thông dịch phức tạp hơn, bạn sẽ phải chạy nó, và các máy tính lúc đó không đủ mạnh.

Bây giờ thì chúng đủ mạnh. Bây giờ bạn có thể tiếp tục sử dụng cách tiếp cận tiên đề của McCarthy cho đến khi bạn đã định nghĩa một ngôn ngữ lập trình hoàn chỉnh. Và miễn là mọi thay đổi bạn thực hiện đối với Lisp của McCarthy đều là một biến đổi bảo tồn tính phát hiện, bạn có thể, về nguyên tắc, kết thúc với một ngôn ngữ hoàn chỉnh có chất lượng này. Khó thực hiện hơn là nói, tất nhiên, nhưng nếu về nguyên tắc có thể, tại sao không thử? Vì vậy, tôi quyết định thử. Mất 4 năm, từ ngày 26 tháng 3 năm 2015 đến ngày 12 tháng 10 năm 2019. Thật may mắn khi tôi có một mục tiêu được xác định chính xác, nếu không sẽ rất khó để tiếp tục làm việc trong thời gian dài như vậy.

Tôi đã viết Lisp mới này, gọi là Bel, trong chính nó trong Arc. Điều đó có thể nghe có vẻ mâu thuẫn, nhưng đó là một dấu hiệu của loại thủ đoạn mà tôi phải tham gia để làm cho điều này hoạt động. Bằng cách sử dụng một bộ sưu tập hack kinh khủng, tôi đã thành công trong việc tạo ra một thứ gần giống như một trình thông dịch được viết trong chính nó có thể thực sự chạy. Không nhanh, nhưng đủ nhanh để kiểm tra.

Tôi đã cấm mình viết bài luận trong hầu hết thời gian này, nếu không tôi sẽ không bao giờ hoàn thành. Cuối năm 2015, tôi đã dành 3 tháng viết bài luận, và khi tôi quay trở lại làm việc trên Bel, tôi hầu như không thể hiểu được mã. Không phải vì nó được viết kém mà vì vấn đề rất phức tạp. Khi bạn làm việc trên một trình thông dịch được viết trong chính nó, rất khó để theo dõi những gì đang xảy ra ở mức độ nào, và lỗi có thể gần như được mã hóa khi bạn nhận được chúng.

Vì vậy, tôi đã nói không còn bài luận nữa cho đến khi Bel được hoàn thành. Nhưng tôi đã nói rất ít với mọi người về Bel trong khi tôi làm việc trên nó. Vì vậy, trong nhiều năm, có lẽ đã có vẻ như tôi không làm gì, khi thực tế tôi làm việc chăm chỉ hơn bao giờ hết. Thỉnh thoảng sau khi vật lộn hàng giờ với một lỗi khủng khiếp nào đó, tôi kiểm tra Twitter hoặc HN và thấy ai đó hỏi "Paul Graham còn lập trình không?"

Làm việc trên Bel rất khó nhưng thỏa mãn. Tôi làm việc rất chăm chỉ đến mức tại bất kỳ thời điểm nào tôi cũng có một phần lớn mã trong đầu và có thể viết thêm ở đó. Tôi nhớ đưa các con trai đến bờ biển vào một ngày nắng năm 2015 và giải quyết một số vấn đề liên quan đến tiếp tục trong khi tôi quan sát chúng chơi trong các vũng nước. Nó cảm thấy như tôi đang làm đúng cuộc sống. Tôi nhớ điều đó vì tôi hơi thất vọng khi nhận ra nó cảm thấy mới mẻ đến thế. Tin tốt là tôi có nhiều khoảnh khắc như thế này trong vài năm tới.

Mùa hè năm 2016 chúng tôi chuyển đến Anh. Chúng tôi muốn các con của chúng tôi biết cảm giác sống ở một đất nước khác, và vì tôi là công dân Anh theo quyền sinh ra, đó dường như là lựa chọn rõ ràng. Chúng tôi chỉ dự định ở lại một năm, nhưng chúng tôi thích nó đến mức chúng tôi vẫn sống ở đó. Vì vậy, phần lớn Bel được viết ở Anh.

Mùa thu năm 2019, Bel cuối cùng đã hoàn thành. Giống như Lisp ban đầu của McCarthy, đó là một đặc tả thay vì một triển khai, mặc dù giống như Lisp của McCarthy, đó là một đặc tả được biểu đạt dưới dạng mã.

Bây giờ tôi có thể viết bài luận lại, tôi đã viết rất nhiều bài luận về các chủ đề tôi đã chất đống. Tôi tiếp tục viết bài luận suốt năm 2020, nhưng tôi cũng bắt đầu nghĩ về những thứ khác mà tôi có thể làm việc. Làm thế nào tôi nên chọn những gì để làm? Vâng, làm thế nào tôi đã chọn làm gì trong quá khứ? Tôi đã viết một bài luận cho mình để trả lời câu hỏi đó, và tôi đã ngạc nhiên khi câu trả lời dài và lộn xộn thế nào. Nếu điều này làm tôi ngạc nhiên, người đã sống nó, thì tôi nghĩ có lẽ sẽ thú vị đối với người khác, và khuyến khích những người có cuộc sống lộn xộn tương tự. Vì vậy, tôi đã viết một phiên bản chi tiết hơn để người khác đọc, và đây là câu cuối cùng của nó.

Lưu ý

Kinh nghiệm của tôi đã bỏ qua một bước trong sự phát triển của máy tính: các máy tính chia sẻ thời gian với các hệ điều hành tương tác. Tôi đã đi thẳng từ xử lý lô sang máy tính vi mô, điều này làm cho máy tính vi mô trở nên hấp dẫn hơn.

Các từ tiếng Ý cho các khái niệm trừu tượng gần như luôn có thể được dự đoán từ các từ tương đương trong tiếng Anh (ngoại trừ một số bẫy như polluzione). Chính những từ hàng ngày mới khác biệt. Vì vậy, nếu bạn nối nhiều khái niệm trừu tượng với một vài động từ đơn giản, bạn có thể làm cho tiếng Ý ít đi xa hơn.

Tôi sống tại Piazza San Felice 4, vì vậy đường đi bộ của tôi đến Accademia đi thẳng qua xương sống của Florence cổ: qua Pitti, qua cầu, qua Orsanmichele, giữa Duomo và Baptistery, và sau đó lên Via Ricasoli đến Piazza San Marco. Tôi đã thấy Florence ở mức độ đường phố trong mọi điều kiện có thể, từ những buổi tối mùa đông tối tăm trống rỗng đến những ngày hè nắng nóng khi các đường phố chật cứng du khách.

Bạn tất nhiên có thể vẽ người như tĩnh vật nếu bạn muốn, và họ sẵn sàng. Loại chân dung này có thể được cho là đỉnh cao của hội họa tĩnh vật, mặc dù việc ngồi lâu có xu hướng tạo ra những biểu cảm đau đớn trong các mẫu vẽ.

Interleaf là một trong nhiều công ty có người thông minh và xây dựng công nghệ ấn tượng, nhưng lại bị nghiền nát bởi Luật Moore. Trong những năm 1990, sự phát triển theo cấp số nhân của sức mạnh của các bộ xử lý hàng hóa (tức là Intel) đã cuốn trôi các công ty phần cứng và phần mềm đặc biệt cao cấp như một chiếc xe ủi đất.

Những người tìm kiếm phong cách đặc trưng tại RISD không cụ thể là tham lam. Trong thế giới nghệ thuật, tiền bạc và sự ngầu kết hợp chặt chẽ. Bất cứ thứ gì đắt tiền đều được coi là ngầu, và bất cứ thứ gì được coi là ngầu sẽ sớm trở nên đắt đỏ như vậy.

Kỹ thuật mà căn hộ không được kiểm soát giá mà là ổn định giá, nhưng đây là một sự tinh chỉnh mà chỉ người New York mới biết hoặc quan tâm. Điểm quan trọng là nó rất rẻ, ít hơn một nửa giá thị trường.

Hầu hết phần mềm bạn có thể khởi chạy ngay khi nó hoàn thành. Nhưng khi phần mềm là một trình tạo cửa hàng trực tuyến và bạn đang lưu trữ các cửa hàng, nếu bạn không có bất kỳ người dùng nào, điều đó sẽ rõ ràng một cách đau đớn. Vì vậy, trước khi chúng tôi có thể khởi chạy công khai, chúng tôi phải khởi chạy riêng, theo nghĩa là tuyển dụng một tập hợp người dùng ban đầu và đảm bảo rằng họ có các cửa hàng trông đẹp.

Chúng tôi đã có một trình chỉnh sửa mã trong Viaweb để người dùng xác định các kiểu trang của riêng họ. Họ không biết điều đó, nhưng họ đang chỉnh sửa các biểu thức Lisp bên dưới. Nhưng đây không phải là một trình chỉnh sửa ứng

 dụng, vì mã chạy khi các trang của thương nhân được tạo ra, không phải khi người mua sắm truy cập chúng.

Đây là trường hợp đầu tiên của những gì bây giờ là một trải nghiệm quen thuộc, và cũng là những gì xảy ra tiếp theo, khi tôi đọc các bình luận và thấy chúng đầy những người tức giận. Làm thế nào tôi có thể khẳng định rằng Lisp tốt hơn các ngôn ngữ khác? Chúng không phải tất cả đều hoàn chỉnh Turing sao? Những người thấy các phản hồi với các bài luận tôi viết đôi khi nói với tôi rằng họ cảm thấy rất tiếc cho tôi, nhưng tôi không phóng đại khi trả lời rằng nó luôn luôn như vậy, từ lúc bắt đầu. Nó đi kèm với lãnh thổ. Một bài luận phải nói cho độc giả những điều họ chưa biết, và một số người không thích được nói những điều như vậy.

Mọi người đã đưa rất nhiều thứ lên mạng vào những năm 90 tất nhiên, nhưng đưa một thứ lên mạng không giống như xuất bản nó trực tuyến. Xuất bản trực tuyến có nghĩa là bạn coi phiên bản trực tuyến là phiên bản chính (hoặc ít nhất là một phiên bản chính).

Có một bài học chung ở đây mà kinh nghiệm của chúng tôi với Y Combinator cũng dạy: Phong tục tiếp tục ràng buộc bạn lâu sau khi các hạn chế gây ra chúng đã biến mất. Phong tục của VC từng, giống như các phong tục về viết bài luận, dựa trên những hạn chế thực sự. Các công ty khởi nghiệp từng đắt đỏ hơn nhiều để bắt đầu, và tương đối hiếm. Bây giờ họ có thể rẻ và phổ biến, nhưng phong tục của các VC vẫn phản ánh thế giới cũ, giống như phong tục về viết bài luận vẫn phản ánh các hạn chế của thời đại in ấn.

Điều này lần lượt ngụ ý rằng những người có tư duy độc lập (tức là ít bị ảnh hưởng bởi phong tục) sẽ có lợi thế trong các lĩnh vực bị ảnh hưởng bởi sự thay đổi nhanh chóng (nơi phong tục có nhiều khả năng lỗi thời hơn).

Dưới đây là một điểm thú vị, mặc dù: bạn không thể luôn dự đoán những lĩnh vực nào sẽ bị ảnh hưởng bởi sự thay đổi nhanh chóng. Rõ ràng là phần mềm và đầu tư mạo hiểm sẽ như vậy, nhưng ai sẽ dự đoán rằng viết bài luận sẽ như vậy?

Y Combinator không phải là tên ban đầu. Ban đầu chúng tôi được gọi là Cambridge Seed. Nhưng chúng tôi không muốn một tên khu vực, trong trường hợp ai đó sao chép chúng tôi ở Thung lũng Silicon, vì vậy chúng tôi đổi tên theo một trong những thủ thuật tuyệt vời nhất trong lambda calculus, Y combinator.

Tôi chọn màu cam làm màu của chúng tôi một phần vì nó là màu ấm nhất, và một phần vì không có VC nào sử dụng nó. Năm 2005 tất cả các VC đều sử dụng các màu tẻ nhạt như đỏ đậm, xanh hải quân và xanh rừng, vì họ đang cố gắng thu hút LPs, không phải người sáng lập. Logo YC tự nó là một trò đùa bên trong: logo Viaweb là một chữ V trắng trên một vòng tròn đỏ, vì vậy tôi đã làm logo YC là một chữ Y trắng trên một hình vuông màu cam.

YC đã trở thành một quỹ trong vài năm bắt đầu từ năm 2009, vì nó đã phát triển quá lớn tôi không còn đủ khả năng tài trợ nó cá nhân nữa. Nhưng sau khi Heroku được mua lại, chúng tôi có đủ tiền để trở lại tự tài trợ.

Tôi chưa bao giờ thích thuật ngữ "dòng giao dịch", vì nó ngụ ý rằng số lượng các công ty khởi nghiệp mới tại bất kỳ thời điểm nào là cố định. Điều này không chỉ sai, mà còn là mục đích của YC để phủ định điều đó, bằng cách gây ra các công ty khởi nghiệp được thành lập mà nếu không đã không tồn tại.

Cô ấy báo cáo rằng tất cả chúng có các hình dạng và kích thước khác nhau, vì có một sự chạy trên máy điều hòa không khí và cô ấy phải lấy bất cứ điều gì cô ấy có thể, nhưng tất cả chúng đều nặng hơn cô ấy có thể mang bây giờ.

Một vấn đề khác với HN là một trường hợp cạnh kỳ lạ xảy ra khi bạn vừa viết bài luận vừa điều hành một diễn đàn. Khi bạn điều hành một diễn đàn, bạn được cho là xem nếu không phải mọi cuộc trò chuyện, ít nhất là mọi cuộc trò chuyện liên quan đến bạn. Và khi bạn viết bài luận, mọi người đăng các diễn giải tưởng tượng cao về chúng trên các diễn đàn. Riêng lẻ những hiện tượng này là nhàm chán nhưng chịu đựng được, nhưng sự kết hợp này là thảm họa. Bạn thực sự phải phản hồi các diễn giải sai lầm, bởi vì giả định rằng bạn có mặt trong cuộc trò chuyện có nghĩa là không phản hồi bất kỳ diễn giải sai lầm nào đủ được ủng hộ sẽ được coi là thừa nhận ngầm rằng nó đúng. Nhưng điều đó lần lượt khuyến khích nhiều hơn; bất kỳ ai muốn tranh cãi với bạn cảm nhận rằng bây giờ là cơ hội của họ.

Điều tồi tệ nhất về việc rời khỏi YC là không làm việc với Jessica nữa. Chúng tôi đã làm việc tại YC gần như toàn bộ thời gian chúng tôi biết nhau, và chúng tôi không cố gắng cũng như không muốn tách nó ra khỏi cuộc sống cá nhân của mình, vì vậy rời khỏi giống như nhổ bật một cái cây có rễ sâu.

Một cách để rõ ràng hơn về khái niệm phát minh so với phát hiện là nói về người ngoài hành tinh. Bất kỳ nền văn minh người ngoài hành tinh tiên tiến nào chắc chắn sẽ biết về định lý Pythagoras, ví dụ. Tôi tin rằng, mặc dù với ít chắc chắn hơn, rằng họ cũng sẽ biết về Lisp trong bài báo năm 1960 của McCarthy.

Nhưng nếu đúng vậy, không có lý do gì để cho rằng đây là giới hạn của ngôn ngữ mà họ có thể biết. Có lẽ người ngoài hành tinh cần số và lỗi và I/O nữa. Vì vậy, có vẻ như có ít nhất một con đường ra khỏi Lisp của McCarthy mà tính phát hiện được bảo tồn.

Cảm ơn Trevor Blackwell, John Collison, Patrick Collison, Daniel Gackle, Ralph Hazell, Jessica Livingston, Robert Morris và Harj Taggar đã đọc các bản thảo của điều này.